// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _

def failedStageTypes = []

pipeline {
  agent none
  parameters {
    buildSelector(
        name: 'copyArtifactSelector',
        description: 'A build to take the artifacts from'
    )
    booleanParam defaultValue: true, description: '', name: 'STANDALONE'
    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'
  }
  triggers {
    pollSCM('H H(0-7) * * *')
  }
  stages {
    stage('Prepare') {
      when {
        expression {
          !cambpmWithLabels('standalone')
        }
        beforeAgent true
      }
      agent {
        label 'centos-stable'
      }
      steps {
        cambpmConditionalRetry {
          cambpmCopyArtifacts("cambpm-ce/cambpm-main/${env.BRANCH_NAME}")
          cambpmStash("platform-stash-runtime",
                      ".m2/org/camunda/**/*-SNAPSHOT/**",
                      "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz")
          cambpmStash("platform-stash-qa",
                      ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**",
                      "**/*.zip,**/*.tar.gz")
        }
      }
    }
    stage('check-sql-scripts') {
      agent {
        label 'centos-stable'
      }
      steps {
        cambpmConditionalRetry {
          sh '.ci/scripts/check-sql-scripts.sh'
        }
      }
    }
    stage('Standalone QA tests') {
      parallel {
        stage('sql-scripts-h2') {
          when {
            expression {
              cambpmWithLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('sql-scripts', 'h2')
            }
          }
          post {
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'sql-scripts')
            }
          }
        }
        stage('wildfly-subsystem-UNIT-wildfly') {
          when {
            branch cambpmDefaultBranch();
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMaven('distro/wildfly/subsystem', 'test', runtimeStash: true)
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
          }
        }
        stage('UPGRADE-databases-from-714-h2') {
          when {
            expression {
              cambpmWithLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('upgrade-database', 'h2')
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'upgrade-database')
            }
          }
        }
        stage('UPGRADE-instance-migration-h2') {
          when {
            expression {
              cambpmWithLabels('default-build', 'migration')
            }
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('instance-migration', 'h2')
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'instance-migration')
            }
          }
        }
        stage('UPGRADE-old-engine-from-714-h2') {
          when {
            expression {
              cambpmWithLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('old-engine', 'h2')
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'old-engine')
            }
          }
        }
        stage('UPGRADE-rolling-update-h2') {
          when {
            expression {
              cambpmWithLabels('rolling-update', 'default-build')
            }
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('rolling-update', 'h2')
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'rolling-update')
            }
          }
        }
        stage('PERFORMANCE-large-data-h2') {
          when {
            branch cambpmDefaultBranch();
            beforeAgent true
          }
          agent {
            label 'h2'
          }
          steps {
            cambpmConditionalRetry {
              cambpmRunMavenByStageType('large-data-tests', 'h2')
            }
          }
          post {
            always {
              cambpmPublishTestResult();
            }
            failure {
              cambpmAddFailedStageType(failedStageTypes, 'large-data-tests')
            }
          }
        }
      }
    }
    stage('QA DB tests') {
      agent {
        label 'centos'
      }
      steps {
        script {
          parallel(cambpmGetMatrixStages('daily-stages', failedStageTypes, { stageType, dbLabel ->
            return cambpmWithLabelsList(cambpmGetLabels(stageType, 'cockroachdb'))
          }))
        }
      }
    }
    stage('JDKs') {
      matrix {
        axes {
          axis {
            name 'JDK'
            values 'openjdk-jdk-14-latest', 'openjdk-jdk-13-latest', 'openjdk-jdk-12-latest', 'openjdk-jdk-11-latest',
                   'openjdk-jdk-8-latest', 'jdk-14-latest', 'jdk-13-latest', 'jdk-12-latest', 'jdk-11-latest',
                   'jdk-8-latest', 'ibm-jdk-8-latest'
          }
        }
        when {
          expression {
            cambpmWithLabels('default-build')
          }
          beforeAgent true
        }
        agent {
          label 'h2'
        }
        stages {
          stage('JDK') {
            steps {
              cambpmConditionalRetry {
                cambpmRunMaven('.',
                    'install source:jar source:test-jar -pl \'!webapps\',\'!distro/jbossas7/subsystem\' -Pdistro,distro-ce,distro-wildfly',
                    jdkVersion: env.JDK,
                    runtimeStash: true)
              }
            }
            post {
              always {
                cambpmPublishTestResult();
              }
            }
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          cambpmSendEmailNotification()
        }
      }
    }
    always {
      script {
        if (agentDisconnected()) {// Retrigger the build if the slave disconnected
          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false
        }
      }
    }
  }
}
