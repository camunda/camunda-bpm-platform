import groovy.json.JsonSlurper

// https://github.com/camunda/jenkins-global-shared-library
@Library('camunda-ci') _

String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){
  String mavenForkCount = cpuLimit;
  String mavenMemoryLimit = cpuLimit * 2;
  """
metadata:
  labels:
    agent: ci-cambpm-camunda-cloud-build
spec:
  nodeSelector:
    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt
  tolerations:
  - key: "agents-n1-standard-32-netssd-preempt"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  - name: "jnlp"
    image: "${dockerImage}"
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    tty: true
    env:
    - name: LIMITS_CPU
      value: ${mavenForkCount}
    - name: TZ
      value: Europe/Berlin
    resources:
      limits:
        cpu: ${cpuLimit}
        memory: ${mavenMemoryLimit}Gi
      requests:
        cpu: ${cpuLimit}
        memory: ${mavenMemoryLimit}Gi
    workingDir: "/home/work"
    volumeMounts:
      - mountPath: /home/work
        name: workspace-volume
  """
}

String getJdkAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 800, Integer mavenMemoryLimit = 6) {
  """
metadata:
  labels:
    agent: ci-cambpm-camunda-cloud-build
spec:
  nodeSelector:
    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt
  tolerations:
  - key: "agents-n1-standard-32-netssd-preempt"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  - name: "jnlp"
    image: "${dockerImage}"
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    tty: true
    env:
    - name: TZ
      value: Europe/Berlin
    resources:
      limits:
        memory: ${mavenMemoryLimit}Gi
      requests:
        cpu: ${cpuLimit}m
        memory: ${mavenMemoryLimit}Gi
    workingDir: "/home/work"
    volumeMounts:
      - mountPath: /home/work
        name: workspace-volume
  """
}

pipeline {
  agent none
  parameters {
    buildSelector(
        name: 'copyArtifactSelector',
        description: 'A build to take the artifacts from'
    )
    booleanParam defaultValue: true, description: '', name: 'STANDALONE'
    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'
  }
  triggers {
    pollSCM('H H(0-7) * * *')
  }
  stages {
    stage('Prepare') {
      when {
        expression { params.STANDALONE == false }
        beforeAgent true
      }
      agent {
        kubernetes {
          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
        }
      }
      steps {
        copyArtifacts(projectName: "cambpm-jenkins-pipelines/${env.BRANCH_NAME}", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)
        sh 'ls -al'
        stash name: "platform-stash-runtime", includes: ".m2/org/camunda/**/*-SNAPSHOT/**", excludes: "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz"
        stash name: "platform-stash-qa", includes: ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**", excludes: "**/*.zip,**/*.tar.gz"
      }
    }
    stage('check-sql-scripts') {
      agent {
        kubernetes {
          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
        }
      }
      steps {
        sh '.ci/scripts/check-sql-scripts.sh'
      }
    }
    stage('H2 QA tests') {
      parallel {
        stage('sql-scripts-h2') {
          when {
            expression {
              withLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, false, 'distro/sql-script/', 'install -Pcheck-sql,h2')
            }
          }
        }
        stage('UPGRADE-databases-from-714-h2') {
          when {
            expression {
              withLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, false, 'qa/test-db-upgrade/', 'verify -Pupgrade-db,h2')
            }
          }
          post {
            always {
              junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
            }
          }
        }
        stage('UPGRADE-instance-migration-h2') {
          when {
            expression {
              withLabels('default-build', 'migration')
            }
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, true, 'qa/test-db-instance-migration/', 'verify -Pinstance-migration,h2')
            }
          }
          post {
            always {
              junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
            }
          }
        }
        stage('UPGRADE-old-engine-from-714-h2') {
          when {
            expression {
              withLabels('h2', 'all-db')
            }
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, false, 'qa/', 'verify -Pold-engine,h2')
            }
          }
          post {
            always {
              junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
            }
          }
        }
        stage('UPGRADE-rolling-update-h2') {
          when {
            expression {
              withLabels('rolling-update', 'default-build')
            }
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, true, 'qa/test-db-rolling-update/', 'verify -Prolling-update,h2')
            }
          }
          post {
            always {
              junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
            }
          }
        }
        stage('PERFORMANCE-large-data-h2') {
          when {
            branch defaultBranch();
            beforeAgent true
          }
          agent {
            kubernetes {
              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)
            }
          }
          steps {
            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
              runMaven(true, false, false, 'qa/large-data-tests/', 'verify -Plarge-data-tests,h2')
            }
          }
          post {
            always {
              junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
            }
          }
        }
      }
    }
    stage('QA DB tests') {
      matrix {
        axes {
          axis {
            name 'DB'
            values 'postgresql_96', 'mariadb_103'
          }
          axis {
            name 'PROFILE'
            values 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'
          }
        }
        when {
          expression {
            withLabels(getLabels(env.PROFILE)) && withDbLabels(env.DB)
          }
          beforeAgent true
        }
        agent {
          kubernetes {
            yaml getDbAgent(env.DB)
          }
        }
        stages {
          stage("QA test") {
            steps {
              echo("QA DB Test Stage: ${env.PROFILE}-${env.DB}")
              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
                runMaven(true, false, isQaStashEnabled(env.PROFILE), getMavenProfileDir(env.PROFILE), getMavenProfileCmd(env.PROFILE) + getDbProfiles(DB) + " " + getDbExtras(env.DB), true)
              }
            }
          }
        }
      }
    }
    stage('JDKs') {
      matrix {
        axes {
          axis {
            name 'JDK'
            values 'openjdk-jdk-8-latest', 'openjdk-jdk-14-latest'
          }
        }
        when {
          expression {
            withLabels('default-build')
          }
          beforeAgent true
        }
        agent {
          kubernetes {
            yaml getJdkAgent()
          }
        }
        stages {
          stage('JDK') {
            steps {
              withMaven(jdk: env.JDK, maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
                runMaven(true, false, false, '.', 'install source:jar source:test-jar -pl \'!webapps\',\'!distro/jbossas7/subsystem\' -Pdistro,distro-ce,distro-wildfly')
              }
            }
            post {
              always {
                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true
              }
            }
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          // send email if the slave disconnected
        }
      }
    }
    always {
      script {
        if (agentDisconnected()) {// Retrigger the build if the slave disconnected
          //currentBuild.result = 'ABORTED'
          //currentBuild.description = "Aborted due to connection error"
          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false
        }
      }
    }
  }
}

void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, String directory, String cmd, boolean singleThreaded = false) {
  if (!params.STANDALONE && runtimeStash) unstash "platform-stash-runtime"
  if (!params.STANDALONE && archivesStash) unstash "platform-stash-archives"
  if (!params.STANDALONE && qaStash) unstash "platform-stash-qa"
  String forkCount = singleThreaded? "-DforkCount=1" : '';
  configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {
    sh("mvn -s \$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml")
  }
}

String defaultBranch() {
  return 'pipeline-master'; // TODO
//  return 'master';
}


boolean withLabels(List labels) {
  if (params.STANDALONE && pullRequest.labels.contains('no-build')) {
    return false;
  }

  if (env.BRANCH_NAME == defaultBranch()) {
    return true;
  } else if (!params.STANDALONE) {
    for (l in labels) {
      if (new JsonSlurper().parseText(params.PR_LABELS).contains(l)) {
        return true;
      }
    }
  } else {
    for (l in labels) {
      if (pullRequest.labels.contains(l)) {
        return true;  
      }
    }
  }
  return false;
}

boolean withLabels(String... labels) {
  return withLabels(Arrays.asList(labels));
}

boolean withDbLabels(String dbLabel) {
  return withLabels(getDbType(dbLabel),'all-db');
}

String getDbAgent(String dbLabel, Integer cpuLimit = 4, Integer mavenForkCount = 1){
  Map dbInfo = getDbInfo(dbLabel)
  String mavenMemoryLimit = cpuLimit * 4;
  """
metadata:
  labels:
    name: "${dbLabel}"
    jenkins: "slave"
    jenkins/label: "jenkins-slave-${dbInfo.type}"
spec:
  containers:
  - name: "jnlp"
    image: "gcr.io/ci-30-162810/${dbInfo.type}:${dbInfo.version}"
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    tty: true
    env:
    - name: LIMITS_CPU
      value: ${mavenForkCount}
    - name: TZ
      value: Europe/Berlin
    resources:
      limits:
        memory: ${mavenMemoryLimit}Gi
      requests:
        cpu: ${cpuLimit}
        memory: ${mavenMemoryLimit}Gi
    volumeMounts:
    - mountPath: "/home/work"
      name: "workspace-volume"
    workingDir: "/home/work"
    nodeSelector:
      cloud.google.com/gke-nodepool: "agents-n1-standard-4-netssd-preempt"
    restartPolicy: "Never"
    tolerations:
    - effect: "NoSchedule"
      key: "agents-n1-standard-4-netssd-preempt"
      operator: "Exists"
    volumes:
    - emptyDir:
        medium: ""
      name: "workspace-volume"
  """
}

Map getDbInfo(String databaseLabel) {
  Map SUPPORTED_DBS = ['postgresql_96': [
      type: 'postgresql',
      version: '9.6v0.2.2',
      profiles: 'postgresql',
      extra: ''],
    'mariadb_103': [
      type: 'mariadb',
      version: '10.3v0.3.2',
      profiles: 'mariadb',
      extra: ''],
    'sqlserver_2017': [
      type: 'mssql',
      version: '2017v0.1.1',
      profiles: 'sqlserver',
      extra: '-Ddatabase.name=camunda -Ddatabase.username=sa -Ddatabase.password=cam_123$']
  ]

  return SUPPORTED_DBS[databaseLabel]
}

String getDbType(String dbLabel) {
  String[] database = dbLabel.split("_")
  return database[0]
}

String getDbProfiles(String dbLabel) {
  return getDbInfo(dbLabel).profiles
}

String getDbExtras(String dbLabel) {
  return getDbInfo(dbLabel).extra
}

String resolveMavenProfileInfo(String profile) {
  Map PROFILE_PATHS = [
      'check-sql': [
          directory: 'distro/sql-script/',
          command: 'install -Pcheck-sql,',
          qaStash: false,
          labels: ['all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql']],
     'upgrade-db': [
          directory: 'qa/test-db-upgrade/',
          command: 'verify -Pupgrade-db,',
          qaStash: false,
          labels: ['all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql']],
      'instance-migration': [
          directory: 'qa/test-db-instance-migration/',
          command: 'verify -Pinstance-migration,',
          qaStash: true,
          labels: []],
      'old-engine': [
          directory: 'qa/',
          command: 'verify -Pold-engine,',
          qaStash: false,
          labels: []],
      'rolling-update': [
          directory: 'qa/test-db-rolling-update/',
          command: 'verify -Prolling-update,',
          qaStash: true,
          labels: []],
      'large-data-tests': [
          directory: 'qa/large-data-tests/',
          command: 'verify -Plarge-data-tests,',
          qaStash: false,
          labels: []]
  ]

  return PROFILE_PATHS[profile]
}

String getMavenProfileCmd(String profile) {
  return resolveMavenProfileInfo(profile).command
}

String getMavenProfileDir(String profile) {
  return resolveMavenProfileInfo(profile).directory
}

boolean isQaStashEnabled(String profile) {
  return resolveMavenProfileInfo(profile).qaStash
}

String[] getLabels(String profile) {
  return resolveMavenProfileInfo(profile).labels
}
