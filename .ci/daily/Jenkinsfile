// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library@maven-settings']) _

def failedStageTypes = []

pipeline {
  agent {
    node {
      label 'jenkins-job-runner'
    }
  }
  environment {
    LOGGER_LOG_LEVEL = 'DEBUG'
    MAVEN_VERSION = 'maven-3.8-latest'
    DEF_JDK_VERSION = 'jdk-11-latest'
  }
  parameters {
    booleanParam name: 'TRIGGERED_BY_UPSTREAM', defaultValue: false, description: 'Is the current build triggered in the scope of an upstream pipeline (pull request or default branch)'
    string name: 'UPSTREAM_PROJECT_NAME', defaultValue: '7.XX/cambpm-ce/cambpm-main/master', description: 'Not used on standalone runs. This property is passed by the upstream build that triggers this one.'
    string name: 'UPSTREAM_BUILD_NUMBER', defaultValue: '', description: 'Not used on standalone runs. This property is passed by the upstream build that triggers this one.'
    string name: 'PR_LABELS', defaultValue: '', description: 'The labels assigned to the CE pull request'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
  }
  triggers {
    pollSCM('H H(0-3) * * *') // CE daily runs after EE daily and Sidetrack daily
  }
  stages {
    stage('Misc') {
      parallel {
        stage('platform-DISTRO-maven-central') {
          when {
            expression {
              // trigger docker CE build only on the master branch
              env.BRANCH_NAME == cambpmDefaultBranch() && cambpmIsDevelopmentVersion()
            }
          }
          steps {
            cambpmConditionalRetry([
              agentLabel: 'h2_perf32',
              runSteps: {
                cambpmRunMaven('.',
                  "deploy source:jar source:test-jar javadoc:javadoc -Dskip-zip-frontend-sources=true -DaltStagingDirectory=${WORKSPACE}/staging -DskipRemoteStaging=true -B",
                  withNpm: true,
                  jdkVersion: 'jdk-17-latest')
                script {
                  str = 's@:camunda-nexus:.*\\\$@:central:https://oss.sonatype.org/content/repositories/snapshots@g'
                  sh(label: 'Change staging from Nexus to Maven Central snapshots', script: 'sed -i ' + str + ' staging/deferred/.index')
                }

                cambpmRunMaven('.',
                  "org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DaltStagingDirectory=${WORKSPACE}/staging -DskipStaging=true  -B",
                  withNpm: true,
                  jdkVersion: 'jdk-17-latest')
              },
              postFailure: {
                cambpmPublishTestResult()
              }
            ])
          }
        }
        stage('platform-public-nexus') {
          when {
            expression {
              // trigger docker CE build only on the master branch
              env.BRANCH_NAME == cambpmDefaultBranch() && cambpmIsDevelopmentVersion()
            }
          }
          steps {
            cambpmConditionalRetry([
              agentLabel: 'h2_perf32',
              runSteps: {
                cambpmRunMaven('.',
                  "install source:jar -Pdistro,distro-ce,distro-wildfly,distro-webjar -Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2 -B",
                  withNpm: true,
                  jdkVersion: 'jdk-17-latest',
                  settingsXml: 'pub-repo')
              },
              postFailure: {
                cambpmPublishTestResult()
              }
            ])
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          cambpmSendEmailNotification()
        }
      }
    }
    always {
      cambpmWithSpanAttributes()
    }
  }
}
