// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _

pipeline {
  agent none
  parameters {
    buildSelector(
        name: 'copyArtifactSelector',
        description: 'A build to take the artifacts from'
    )
    booleanParam defaultValue: true, description: '', name: 'STANDALONE'
    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'
  }
  stages {
    stage('Prepare') {
      when {
        expression {
          !cambpmWithLabels('standalone')
        }
        beforeAgent true
      }
      agent {
        node {
          label 'centos-stable'
        }
      }
      steps {
        cambpmCopyArtifacts("cambpm-ce/cambpm-main/${env.BRANCH_NAME}")
        cambpmStash("platform-stash-runtime",
                    ".m2/org/camunda/**/*-SNAPSHOT/**",
                    "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz")
        cambpmStash("platform-stash-qa",
                    ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**",
                    "**/*.zip,**/*.tar.gz")
      }
    }
    stage('UNIT DB tests') {
      matrix {
        axes {
          axis {
            name 'DB'
            values 'cockroachdb_201'
          }
          axis {
            name 'PROFILE'
            values 'engine-unit', 'engine-unit-authorizations', 'webapp-unit', 'webapp-unit-authorizations', 'sql-scripts', 'upgrade-database', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'
          }
        }
        when {
          expression {
            cambpmWithLabelsList(cambpmGetLabels(env.PROFILE))
          }
          beforeAgent true
        }
        agent {
          node {
            label env.DB
          }
        }
        stages {
          stage('UNIT test') {
            steps {
              echo("UNIT DB Test Stage: ${env.PROFILE}-${env.DB}")
              catchError(stageResult: 'FAILURE') {
                withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
                  runMaven(true, false, cambpmIsQaStashEnabled(env.PROFILE), cambpmGetMavenTargetDir(env.PROFILE), cambpmGetMavenTargetAndProfile(env.PROFILE) + cambpmGetDbProfiles(env.DB) + " " + cambpmGetDbExtras(env.DB), true)
                }
              }
            }
            post {
              always {
                cambpmPublishTestResult();
              }
            }
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          // send email if the slave disconnected
        }
      }
    }
    always {
      script {
        if (agentDisconnected()) {// Retrigger the build if the slave disconnected
          //currentBuild.result = 'ABORTED'
          //currentBuild.description = "Aborted due to connection error"
          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false
        }
      }
    }
  }
}

void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, String directory, String cmd, boolean singleThreaded = false) {
  if (!params.STANDALONE && runtimeStash) cambpmUnstash("platform-stash-runtime")
  if (!params.STANDALONE && archivesStash) cambpmUnstash("platform-stash-archives")
  if (!params.STANDALONE && qaStash) cambpmUnstash("platform-stash-qa")
  String forkCount = singleThreaded? "-DforkCount=1" : '';
  configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {
    sh("mvn -s \$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml")
  }
}
