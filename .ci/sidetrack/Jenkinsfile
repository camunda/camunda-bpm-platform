// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _

/**
 * A method to perform a custom evaluation if certain stages in the Side track pipeline
 * should be evaluated. This is necessary since the Side Track pipeline triggers stage types
 * from the Main and Daily pipelines.
 *
 * Note: this method shouldn't be extracted to the shared library
 *       since it is specific to this pipeline.
 *
 * @param stageType - a String indicating the type of stage to be executed.
 * @return boolean. TRUE, if the stage should be triggered. Otherwise, FALSE.
 */
boolean shouldTrigger(String stageType) {
  def qaStages = ['sql-scripts', 'upgrade-database', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests']
  def unitStages = ['engine-unit', 'engine-unit-authorizations', 'webapp-unit', 'webapp-unit-authorizations']
  if (params.STANDALONE) {
    // Daily run
    return qaStages.contains(stageType)
  } else {
    if (env.BRANCH_NAME == cambpmDefaultBranch()) {
      // Downstream master run
      return unitStages.contains(stageType)
    } else {
      // Downstream PR run
      return cambpmWithLabels(cambpmGetLabels(stageType))
    }
  }
}

pipeline {
  agent {
    node {
      label 'jenkins-job-runner'
    }
  }
  environment {
    CAMBPM_LOGGER_LOG_LEVEL = 'DEBUG'
  }
  parameters {
    booleanParam name: 'STANDALONE', defaultValue: true
    booleanParam name: 'UPSTREAM_PR', defaultValue: false, description: 'Is the current build triggered in the scope of an upstream pull request'
    string name: 'UPSTREAM_PROJECT_NAME', defaultValue: 'cambpm-ce/cambpm-main/master'
    string name: 'UPSTREAM_BUILD_NUMBER', defaultValue: ''
    string name: 'PR_LABELS', defaultValue: '', description: 'The labels assigned to the CE pull request'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  triggers {
    pollSCM('H H(0-7) * * *')
  }
  stages {
    stage('Prepare') {
      when {
        expression {
          !cambpmWithLabels('standalone')
        }
      }
      steps {
        cambpmConditionalRetry([
          agentLabel: 'centos-stable',
          suppressErrors: false,
          runSteps: {
            cambpmCopyArtifacts(params.UPSTREAM_PROJECT_NAME, params.UPSTREAM_BUILD_NUMBER)
            cambpmStash("platform-stash-runtime",
                        ".m2/org/camunda/**/*-SNAPSHOT/**",
                        "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz")
            cambpmStash("platform-stash-qa",
                        ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**",
                        "**/*.zip,**/*.tar.gz")
          }
        ])
      }
    }
    stage('UNIT DB tests') {
      steps {
        script {
          // see #shouldTrigger() at the beginning of the file
          // see the .ci/config/matrices.yaml for the stage generation values
          // see .ci/config/stage-types.yaml for the stage configurations
          parallel(cambpmGetMatrixStages('sidetrack-stages', [], { stageInfo ->
            return shouldTrigger(stageInfo.stageType)
          }))
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          cambpmSendEmailNotification()
        }
      }
    }
  }
}
