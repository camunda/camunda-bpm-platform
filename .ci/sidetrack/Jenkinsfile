// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _

/**
 * A method to perform a custom evaluation if certain stages in the Side track pipeline
 * should be evaluated. This is necessary since the Side Track pipeline triggers stage types
 * from the Main and Daily pipelines.
 *
 * Note: this method shouldn't be extracted to the shared library
 *       since it is specific to this pipeline.
 *
 * @param stageType - a String indicating the type of stage to be executed.
 * @return boolean. TRUE, if the stage should be triggered. Otherwise, FALSE.
 */
boolean shouldTrigger(String stageType) {
  def qaStages = ['sql-scripts', 'upgrade-database', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests']
  def unitStages = ['engine-unit', 'engine-unit-authorizations', 'webapp-unit', 'webapp-unit-authorizations']
  if (params.STANDALONE) {
    // Daily run
    return qaStages.contains(stageType)
  } else {
    if (env.BRANCH_NAME == cambpmDefaultBranch()) {
      // Downstream master run
      return unitStages.contains(stageType)
    } else {
      // Downstream PR run
      return cambpmWithLabelsList(cambpmGetLabels(stageType))
    }
  }
}

pipeline {
  agent none
  parameters {
    buildSelector(
        name: 'copyArtifactSelector',
        description: 'A build to take the artifacts from'
    )
    booleanParam defaultValue: true, description: '', name: 'STANDALONE'
    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'
  }
  triggers {
    pollSCM('H H(0-7) * * *')
  }
  stages {
    stage('Prepare') {
      when {
        expression {
          !cambpmWithLabels('standalone')
        }
        beforeAgent true
      }
      agent {
        label 'centos-stable'
      }
      steps {
        cambpmConditionalRetry {
          cambpmCopyArtifacts("cambpm-ce/cambpm-main/${env.BRANCH_NAME}")
          cambpmStash("platform-stash-runtime",
                      ".m2/org/camunda/**/*-SNAPSHOT/**",
                      "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz")
          cambpmStash("platform-stash-qa",
                      ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**",
                      "**/*.zip,**/*.tar.gz")
        }
      }
    }
    stage('UNIT DB tests') {
      matrix {
        axes {
          axis {
            name 'DB'
            values 'cockroachdb_201'
          }
          axis {
            name 'STAGE_TYPE'
            values 'engine-unit', 'engine-unit-authorizations', 'webapp-unit', 'webapp-unit-authorizations', 'sql-scripts', 'upgrade-database', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'
          }
        }
        when {
          expression {
            shouldTrigger(env.STAGE_TYPE)
          }
          beforeAgent true
        }
        agent {
          label env.DB
        }
        stages {
          stage('UNIT test') {
            steps {
              cambpmConditionalRetry {
                echo("UNIT DB Test Stage: ${env.STAGE_TYPE}-${env.DB}")
                cambpmRunMavenByStageType(env.STAGE_TYPE, env.DB)
              }
            }
            post {
              always {
                script {
                  if (!env.STAGE_TYPE.equals('sql-scripts')) {
                    cambpmPublishTestResult();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          cambpmSendEmailNotification()
        }
      }
    }
    always {
      script {
        if (agentDisconnected()) {// Retrigger the build if the slave disconnected
          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false
        }
      }
    }
  }
}