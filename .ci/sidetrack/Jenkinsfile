import groovy.json.JsonSlurper

// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/camunda/cambpm-jenkins-shared-library
@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _

pipeline {
  agent none
  parameters {
    buildSelector(
        name: 'copyArtifactSelector',
        description: 'A build to take the artifacts from'
    )
    booleanParam defaultValue: true, description: '', name: 'STANDALONE'
    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'
  }
  stages {
    stage('Prepare') {
      when {
        expression { params.STANDALONE == false }
        beforeAgent true
      }
      agent {
        node {
          label 'centos-stable'
        }
      }
      steps {
        copyArtifacts(projectName: "cambpm-ce/cambpm-main/${env.BRANCH_NAME}", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)
        stash name: "platform-stash-runtime", includes: ".m2/org/camunda/**/*-SNAPSHOT/**", excludes: "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz"
        stash name: "platform-stash-qa", includes: ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**", excludes: "**/*.zip,**/*.tar.gz"
      }
    }
    stage('UNIT DB tests') {
      matrix {
        axes {
          axis {
            name 'DB'
            values 'cockroachdb_201'
          }
          axis {
            name 'PROFILE'
            values 'engine-unit', 'engine-unit-authorizations', 'webapp-unit', 'webapp-unit-authorizations', 'sql-scripts', 'upgrade-database', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'
          }
        }
        when {
          expression {
            withLabels(getLabels(env.PROFILE))
          }
          beforeAgent true
        }
        agent {
          node {
            label env.DB
          }
        }
        stages {
          stage('UNIT test') {
            steps {
              echo("UNIT DB Test Stage: ${env.PROFILE}-${env.DB}")
              catchError(stageResult: 'FAILURE') {
                withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
                  runMaven(true, false, isQaStashEnabled(env.PROFILE), getMavenProfileDir(env.PROFILE), getMavenProfileCmd(env.PROFILE) + cambpmGetDbProfiles(env.DB) + " " + cambpmGetDbExtras(env.DB), true)
                }
              }
            }
            post {
              always {
                cambpmPublishTestResult();
              }
            }
          }
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          // send email if the slave disconnected
        }
      }
    }
    always {
      script {
        if (agentDisconnected()) {// Retrigger the build if the slave disconnected
          //currentBuild.result = 'ABORTED'
          //currentBuild.description = "Aborted due to connection error"
          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false
        }
      }
    }
  }
}

void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, String directory, String cmd, boolean singleThreaded = false) {
  if (!params.STANDALONE && runtimeStash) unstash "platform-stash-runtime"
  if (!params.STANDALONE && archivesStash) unstash "platform-stash-archives"
  if (!params.STANDALONE && qaStash) unstash "platform-stash-qa"
  String forkCount = singleThreaded? "-DforkCount=1" : '';
  configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {
    sh("mvn -s \$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml")
  }
}

boolean withLabels(List labels) {
  if (params.STANDALONE && pullRequest.labels.contains('TODO')) {
  //if (params.STANDALONE && pullRequest.labels.contains('no-build')) {
    return false;
  }

  if (env.BRANCH_NAME == cambpmDefaultBranch()) {
    return true;
  } else if (!params.STANDALONE) {
    for (l in labels) {
      if (new JsonSlurper().parseText(params.PR_LABELS).contains(l)) {
        return true;
      }
    }
  } else {
    for (l in labels) {
      if (pullRequest.labels.contains(l)) {
        return true;  
      }
    }
  }
  return false;
}

boolean withLabels(String... labels) {
  return withLabels(Arrays.asList(labels));
}

boolean withDbLabels(String dbLabel) {
  return withLabels(cambpmGetDbType(dbLabel));
}

String resolveMavenProfileInfo(String profile) {
  Map PROFILE_PATHS = [
      'engine-unit': [
          directory: 'engine/',
          command: 'clean test -P',
          qaStash: false,
          labels: ['all-db','cockroachdb','authorizations']],
      'engine-unit-authorizations': [
          directory: 'engine/',
          command: 'clean test -PcfgAuthorizationCheckRevokesAlways,',
          qaStash: false,
          labels: ['authorizations']],
      'webapp-unit': [
          directory: 'webapps/',
          command: 'clean test -Dskip.frontend.build=true -P',
          qaStash: false,
          labels: []],
      'webapp-unit-authorizations': [
          directory: 'webapps/',
          command: 'clean test -Dskip.frontend.build=true -PcfgAuthorizationCheckRevokesAlways,',
          qaStash: false,
          labels: []],
      'sql-scripts': [
          directory: 'distro/sql-script/',
          command: 'install -Pcheck-sql,',
          qaStash: false,
          labels: ['all-db','cockroachdb']],
     'upgrade-database': [
          directory: 'qa/test-db-upgrade/',
          command: 'verify -Pupgrade-db,',
          qaStash: false,
          labels: ['all-db','cockroachdb']],
      'instance-migration': [
          directory: 'qa/test-db-instance-migration/',
          command: 'verify -Pinstance-migration,',
          qaStash: true,
          labels: []],
      'old-engine': [
          directory: 'qa/',
          command: 'verify -Pold-engine,',
          qaStash: false,
          labels: ['all-db','cockroachdb']],
      'rolling-update': [
          directory: 'qa/test-db-rolling-update/',
          command: 'verify -Prolling-update,',
          qaStash: true,
          labels: []],
      'large-data-tests': [
          directory: 'qa/large-data-tests/',
          command: 'verify -Plarge-data-tests,',
          qaStash: false,
          labels: []]
  ]

  return PROFILE_PATHS[profile]
}

String getMavenProfileCmd(String profile) {
  return resolveMavenProfileInfo(profile).command
}

String getMavenProfileDir(String profile) {
  return resolveMavenProfileInfo(profile).directory
}

boolean isQaStashEnabled(String profile) {
  return resolveMavenProfileInfo(profile).qaStash
}

String[] getLabels(String profile) {
  return resolveMavenProfileInfo(profile).labels
}