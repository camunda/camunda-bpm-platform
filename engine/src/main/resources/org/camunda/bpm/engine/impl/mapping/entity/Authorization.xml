<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity">

  <!-- AUTHORIZATION INSERT -->
  <insert id="insertAuthorization" parameterType="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity">
    insert into ${prefix}ACT_RU_AUTHORIZATION (
      ID_,
      TYPE_,
      GROUP_ID_,
      USER_ID_,
      RESOURCE_TYPE_,
      RESOURCE_ID_,
      PERMS_,
      REV_
      )
    values (
      #{id ,jdbcType=VARCHAR},
      #{authorizationType ,jdbcType=INTEGER},
      #{groupId ,jdbcType=VARCHAR},
      #{userId ,jdbcType=VARCHAR},
      #{resourceType ,jdbcType=INTEGER},
      #{resourceId ,jdbcType=VARCHAR},
      #{permissions, jdbcType=INTEGER},
      1
    )
  </insert>

  <!-- AUTHORIZATION UPDATE -->

  <update id="updateAuthorization" parameterType="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity">
    update ${prefix}ACT_RU_AUTHORIZATION set
      REV_ = #{revisionNext, jdbcType=INTEGER},
      TYPE_ = #{authorizationType, jdbcType=INTEGER},
      GROUP_ID_ = #{groupId, jdbcType=VARCHAR},
      USER_ID_ = #{userId, jdbcType=VARCHAR},
      RESOURCE_TYPE_ = #{resourceType, jdbcType=INTEGER},
      RESOURCE_ID_ = #{resourceId, jdbcType=VARCHAR},
      PERMS_ = #{permissions, jdbcType=INTEGER}
    where ID_ = #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <!-- AUTHORIZATION DELETE -->

  <update id="deleteAuthorization" parameterType="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity">
    DELETE FROM 
        ${prefix}ACT_RU_AUTHORIZATION 
    where
        ID_ = #{id}
        and REV_ = #{revision}
  </update>

  <delete id="deleteAuthorizationsForResourceId" parameterType="map">
    delete from ${prefix}ACT_RU_AUTHORIZATION 
    where 
        RESOURCE_TYPE_ = #{resourceType} 
        AND RESOURCE_ID_ = #{resourceId}
  </delete>

  <!-- AUTHORIZATION RESULTMAP -->

  <resultMap id="authorizationResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="authorizationType" column="TYPE_" jdbcType="INTEGER" />
    <result property="groupId" column="GROUP_ID_" jdbcType="VARCHAR" />
    <result property="userId" column="USER_ID_" jdbcType="VARCHAR" />
    <result property="resourceType" column="RESOURCE_TYPE_" jdbcType="INTEGER" />
    <result property="resourceId" column="RESOURCE_ID_" jdbcType="VARCHAR" />
    <result property="permissions" column="PERMS_" jdbcType="INTEGER" />
  </resultMap>

  <!-- AUTHORIZATION SELECT -->

  <select id="selectAuthorizationByParameters" resultMap="authorizationResultMap">
    SELECT
        *
    FROM
        ${prefix}ACT_RU_AUTHORIZATION
    <where>
      <if test="type != null">
        TYPE_ = #{type}
      </if>
      <if test="userId != null">
        AND USER_ID_ = #{userId}
      </if>
      <if test="groupId != null">
        AND GROUP_ID_ = #{groupId}
      </if>
      <if test="resourceType != null">
        AND RESOURCE_TYPE_ = #{resourceType}
      </if>
      <if test="resourceId != null">
        AND RESOURCE_ID_ = #{resourceId}
      </if>
    </where>
  </select>

  <select id="selectAuthorization" resultMap="authorizationResultMap">
    select * FROM ${prefix}ACT_RU_AUTHORIZATION WHERE ID_ = #{id}
  </select>

  <select id="selectAuthorizationByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.AuthorizationQueryImpl" resultMap="authorizationResultMap">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.* 
    ${limitBetween}
    <include refid="selectAuthorizationByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectAuthorizationCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.AuthorizationQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectAuthorizationByQueryCriteriaSql"/>
  </select>

  <sql id="selectAuthorizationByQueryCriteriaSql">
    from ${prefix}ACT_RU_AUTHORIZATION RES
    <where>
      <if test="id != null">
        RES.ID_ = #{id}
      </if>

      <if test="authorizationType != null">
        and RES.TYPE_ = #{authorizationType}
      </if>

      <!-- userIds -->
      <if test="userIds != null &amp;&amp; userIds.length > 0">
        and RES.USER_ID_ in
        <foreach item="item" index="index" collection="userIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <!-- groupIds -->
      <if test="groupIds != null &amp;&amp; groupIds.length > 0">
        and RES.GROUP_ID_ in
        <foreach item="item" index="index" collection="groupIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <if test="queryByResourceType">
        and RES.RESOURCE_TYPE_ = #{resourceType}
      </if>
      <if test="resourceId != null">
        and RES.RESOURCE_ID_ = #{resourceId}
      </if>
      <if test="queryByPermission">
        and ${bitand1}RES.PERMS_${bitand2}#{permission}${bitand3} = #{permission}  
      </if>

      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck" />

    </where>
  </sql>

  <select id="isUserAuthorizedForResource" resultType="integer">

    <if test="permissionChecks != null &amp;&amp; permissionChecks.atomicChecks.size() > 1">
      SELECT
    </if>

    <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authorizationCheck" />

   <if test="permissionChecks != null &amp;&amp; permissionChecks.atomicChecks.size() > 1">
      ${dbSpecificDummyTable}
    </if>

  </select>

  <sql id="authCheck">
    SELECT
    CASE

      <!-- User GRANT -->
      <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
        WHEN
          <if test="permCheck.resourceIdQueryParam != null">
          ${permCheck.resourceIdQueryParam} IN
          </if>
          <if test="permCheck.resourceId != null">
          EXISTS
          </if>
            (SELECT
                    A.RESOURCE_ID_
             FROM
                    ${prefix}ACT_RU_AUTHORIZATION A
             WHERE
                    A.TYPE_ = 1
             AND
                    A.USER_ID_ = #{authUserId, jdbcType=VARCHAR}
             AND
                    ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms,  jdbcType=INTEGER}
             AND
                    A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
             AND
                    A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
        THEN 1
      </if>

      <!-- User REVOKE -->
      <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
        WHEN
          <if test="permCheck.resourceIdQueryParam != null">
          ${permCheck.resourceIdQueryParam} IN
          </if>
          <if test="permCheck.resourceId != null">
          EXISTS
          </if>
            (SELECT
                    A.RESOURCE_ID_
             FROM
                    ${prefix}ACT_RU_AUTHORIZATION A
             WHERE
                    A.TYPE_ = 2
             AND
                    A.USER_ID_ = #{authUserId, jdbcType=VARCHAR}
             AND
                    ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms,  jdbcType=INTEGER}
             AND
                    A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
             AND
                    A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
        THEN 0
      </if>

      <!-- User GRANT -->
      WHEN
        EXISTS
          (SELECT
                  ID_
           FROM
                  ${prefix}ACT_RU_AUTHORIZATION A
           WHERE
                  A.TYPE_ = 1
           AND
                  A.USER_ID_ = #{authUserId, jdbcType=VARCHAR}
           AND
                  ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms, jdbcType=INTEGER}
           AND
                  A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
           AND
                  A.RESOURCE_ID_ = '*')
        THEN 1

      <!-- User REVOKE -->
      WHEN
        EXISTS
          (SELECT
                  ID_
           FROM
                  ${prefix}ACT_RU_AUTHORIZATION A
           WHERE
                  A.TYPE_ = 2
           AND
                  A.USER_ID_ = #{authUserId, jdbcType=VARCHAR}
           AND
                  ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms, jdbcType=INTEGER}
           AND
                  A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
           AND
                  A.RESOURCE_ID_ = '*')
      THEN 0

      ELSE
          (
          SELECT
            CASE
              <if test="authGroupIds != null &amp;&amp; authGroupIds.size() > 0">

                <!-- Group GRANTS -->
                <foreach collection="authGroupIds" index="index" item="authGroupId">
                  <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
                    WHEN
                      <if test="permCheck.resourceIdQueryParam != null">
                      ${permCheck.resourceIdQueryParam} IN
                      </if>
                      <if test="permCheck.resourceId != null">
                      EXISTS
                      </if>
                        (SELECT
                                A.RESOURCE_ID_
                         FROM
                                ${prefix}ACT_RU_AUTHORIZATION A
                         WHERE
                                A.TYPE_ = 1
                         AND
                                A.GROUP_ID_ = #{authGroupId, jdbcType=VARCHAR}
                         AND
                                ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms,  jdbcType=INTEGER}
                         AND
                                A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                         AND
                                A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
                    THEN 1
                  </if>
                </foreach>

                <!-- Group REVOKES -->
                <foreach collection="authGroupIds" index="index" item="authGroupId">
                  <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
                    WHEN
                      <if test="permCheck.resourceIdQueryParam != null">
                      ${permCheck.resourceIdQueryParam} IN
                      </if>
                      <if test="permCheck.resourceId != null">
                      EXISTS
                      </if>
                        (SELECT
                                A.RESOURCE_ID_
                         FROM
                                ${prefix}ACT_RU_AUTHORIZATION A
                         WHERE
                                A.TYPE_ = 2
                         AND
                                A.GROUP_ID_ = #{authGroupId, jdbcType=VARCHAR}
                         AND
                                ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms,  jdbcType=INTEGER}
                         AND
                                A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                         AND
                                A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
                    THEN 0
                  </if>
                </foreach>

                <!-- Group GRANTS -->
                <foreach collection="authGroupIds" index="index" item="authGroupId">
                WHEN
                  EXISTS
                    (SELECT
                            ID_
                     FROM
                            ${prefix}ACT_RU_AUTHORIZATION A
                     WHERE
                            A.TYPE_ = 1
                     AND
                            A.GROUP_ID_ = #{authGroupId, jdbcType=VARCHAR}
                     AND
                            ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms, jdbcType=INTEGER}
                     AND
                            A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                     AND
                            A.RESOURCE_ID_ = '*')
                  THEN 1
                </foreach>

                <!-- Group REVOKES -->
                <foreach collection="authGroupIds" index="index" item="authGroupId">
                WHEN
                  EXISTS
                    (SELECT
                            ID_
                     FROM
                            ${prefix}ACT_RU_AUTHORIZATION A
                     WHERE
                            A.TYPE_ = 2
                     AND
                            A.GROUP_ID_ = #{authGroupId, jdbcType=VARCHAR}
                     AND
                            ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms, jdbcType=INTEGER}
                     AND
                            A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                     AND
                            A.RESOURCE_ID_ = '*')
                  THEN 0
                </foreach>
                ELSE (
                      SELECT
                        CASE
              </if>
                          <!-- GLOBAL GRANTS -->
                          <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
                            WHEN
                              <if test="permCheck.resourceIdQueryParam != null">
                              ${permCheck.resourceIdQueryParam} IN
                              </if>
                              <if test="permCheck.resourceId != null">
                              EXISTS
                              </if>
                                (SELECT
                                        A.RESOURCE_ID_
                                 FROM
                                        ${prefix}ACT_RU_AUTHORIZATION A
                                 WHERE
                                        A.TYPE_ = 0
                                 AND
                                        A.USER_ID_ = '*'
                                 AND
                                        ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms,  jdbcType=INTEGER}
                                 AND
                                        A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                                 AND
                                        A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
                            THEN 1
                          </if>

                          <!-- GLOBAL REVOKES -->
                          <if test="permCheck.resourceIdQueryParam != null || (permCheck.resourceId != null &amp;&amp; !permCheck.resourceId.equals('*')) ">
                            WHEN
                              <if test="permCheck.resourceIdQueryParam != null">
                              ${permCheck.resourceIdQueryParam} IN
                              </if>
                              <if test="permCheck.resourceId != null">
                              EXISTS
                              </if>
                                (SELECT
                                        A.RESOURCE_ID_
                                 FROM
                                        ${prefix}ACT_RU_AUTHORIZATION A
                                 WHERE
                                        A.TYPE_ = 0
                                 AND
                                        A.USER_ID_ = '*'
                                 AND
                                        ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms,  jdbcType=INTEGER}
                                 AND
                                        A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                                 AND
                                        A.RESOURCE_ID_ = <if test="permCheck.resourceIdQueryParam != null">${permCheck.resourceIdQueryParam}</if><if test="permCheck.resourceId != null">#{permCheck.resourceId, jdbcType=VARCHAR}</if>)
                            THEN 0
                          </if>

                          <!-- GLOBAL GRANTS -->
                          WHEN
                            EXISTS
                              (SELECT
                                      ID_
                               FROM
                                      ${prefix}ACT_RU_AUTHORIZATION A
                               WHERE
                                      A.TYPE_ = 0
                               AND
                                      A.USER_ID_ = '*'
                               AND
                                      ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} = #{permCheck.perms, jdbcType=INTEGER}
                               AND
                                      A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                               AND
                                      A.RESOURCE_ID_ = '*')
                            THEN 1

                          <!-- GLOBAL REVOKES -->
                          WHEN
                            EXISTS
                              (SELECT
                                      ID_
                               FROM
                                      ${prefix}ACT_RU_AUTHORIZATION A
                               WHERE
                                      A.TYPE_ = 0
                               AND
                                      A.USER_ID_ = '*'
                               AND
                                      ${bitand1}A.PERMS_${bitand2}#{permCheck.perms, jdbcType=INTEGER}${bitand3} != #{permCheck.perms, jdbcType=INTEGER}
                               AND
                                      A.RESOURCE_TYPE_ = #{permCheck.resourceType, jdbcType=INTEGER}
                               AND
                                      A.RESOURCE_ID_ = '*')
                            THEN 0

                          <!-- No matching authorization found: request is not authorized -->
                          ELSE
                          <if test="permCheck.authorizationNotFoundReturnValue != null">
                            ${permCheck.authorizationNotFoundReturnValue}
                          </if>
                          <if test="permCheck.authorizationNotFoundReturnValue == null">
                            null
                          </if>

              <if test="authGroupIds != null &amp;&amp; authGroupIds.size() > 0">
                        END ${dbSpecificDummyTable}
                )
              </if>
            END ${dbSpecificDummyTable}
      )
    END  ${dbSpecificDummyTable}
  </sql>

  <!-- reusable authorization check for queries. -->
  <sql id="queryAuthorizationCheck">
    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">

        AND (<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authorizationCheck" />) = 1

    </if>
  </sql>

  <!-- 
    input: "permissionChecks": an instance of CompositePermissionCheck
  
    limitation 1: can only handle at most two levels of composition (e.g. "(a or b) and (c or d)"); 
      more levels are currently not implemented because MyBatis cannot process circular include statements
      
    limitation 2: can only a CompositePermissionCheck instance that contains atomic checks or composite cheks,
      not a mixture of both (i.e. if you need "a or (b and c)", wrap "a" in another CompositePermissionCheck 
   -->
  <sql id="authorizationCheck">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.atomicChecks" />
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.compositeChecks" />
  </sql>
  
  <!-- 
    input: "permissionChecks": an instance of CompositePermissionCheck
   -->
  <sql id="atomicChecks">
    <if test="permissionChecks.atomicChecks != null &amp;&amp; permissionChecks.atomicChecks.size() == 1">

      <bind name="permCheck" value="permissionChecks.atomicChecks[0]" />
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>

    </if>

    <if test="permissionChecks.atomicChecks != null &amp;&amp; permissionChecks.atomicChecks.size() > 1">
      <if test="permissionChecks.disjunctive">
        <bind name="atomicChecks" value="permissionChecks.atomicChecks" />
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.disjunctiveAtomicChecks" />
      </if>
      <if test="!permissionChecks.disjunctive">
        <bind name="atomicChecks" value="permissionChecks.atomicChecks" />
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.conjunctiveAtomicChecks" />
      </if>
    </if>
  </sql>
  
  <!-- 
    input: "permissionChecks": an instance of CompositePermissionCheck
   -->
  <sql id="compositeChecks">
    <if test="permissionChecks.compositeChecks != null &amp;&amp; permissionChecks.compositeChecks.size() > 1">
      <if test="permissionChecks.disjunctive">
        <bind name="compositeChecks" value="permissionChecks.compositeChecks" />
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.disjunctiveCompositeChecks"/>
      </if>
      <if test="!permissionChecks.disjunctive">
        <bind name="compositeChecks" value="permissionChecks.compositeChecks" />
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.conjunctiveCompositeChecks"/>
      </if>
    </if>
  </sql>
  
  <!-- 
    input: "atomicChecks": list of PermissionCheck objects
   -->
  <sql id="disjunctiveAtomicChecks">
    <foreach item="permCheck" index="index" collection="atomicChecks" separator=",">
      ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
    </foreach>
    , 0
    <foreach item="permCheck" index="index" collection="atomicChecks">
      )
    </foreach>
  </sql>
  
  <!-- 
    input: "compositeChecks": a list of CompositePermissionCheck objects
   -->
  <sql id="disjunctiveCompositeChecks">
    <foreach item="permissionChecks" index="index" collection="compositeChecks" separator=",">
      ${dbSpecificIfNullFunction}(<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.atomicChecks" />
    </foreach>
    , 0
    <foreach item="permissionChecks" index="index" collection="compositeChecks">
      )
    </foreach> 
  </sql>
  
  <!-- 
    input: "atomicChecks": list of PermissionCheck objects
   -->
  <sql id="conjunctiveAtomicChecks">
    <!-- the BITAND function on databases like Oracle and DB2 takes exactly two arguments;
      Instead of BITAND(a, b, c), we generate BITAND(BITAND(a, b), c)) instead -->
    <foreach index="index" collection="atomicChecks">
      <if test="index &lt; atomicChecks.size - 1">
        ${bitand1}
      </if>
    </foreach>
    <foreach  item="permCheck" index="i" collection="atomicChecks">
      ${dbSpecificIfNullFunction}(
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>
      , 0)
      <if test="i &gt; 0">
        ${bitand3}
      </if>
      <if test="i &lt; atomicChecks.size - 1">
        ${bitand2}
      </if>
    </foreach>
  </sql>
  
  <!-- 
    input: "compositeChecks": a list of CompositePermissionCheck objects
   -->
  <sql id="conjunctiveCompositeChecks">
    <!-- the BITAND function on databases like Oracle and DB2 takes exactly two arguments;
      Instead of BITAND(a, b, c), we generate BITAND(BITAND(a, b), c)) instead -->
    <foreach index="index" collection="compositeChecks">
      <if test="index &lt; compositeChecks.size - 1">
        ${bitand1}
      </if>
    </foreach>
    <foreach  item="permissionChecks" index="i" collection="compositeChecks">
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.atomicChecks" />
      <if test="i &gt; 0">
        ${bitand3}
      </if>
      <if test="i &lt; compositeChecks.size - 1">
        ${bitand2}
      </if>
    </foreach>
  </sql>

  <sql id="contextualAuthorizationCheck">
    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
      AND
        ( CASE

          WHEN
            <!-- variable instance or task exists in context of a process instance -->
            RES.EXECUTION_ID_ is not null
          THEN
            (<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authorizationCheck" />)

          WHEN
            <!-- variable instance or task exists in context of a case instance -->
            RES.CASE_EXECUTION_ID_ is not null
          THEN
            <!-- everything which exists in context of a case instance is visible to the users -->
            1

          ELSE
            <!-- (1) variable instance exists in context of a standalone task or -->
            <!-- (2) task is a standalone task and does not exist in context of process or case instance -->
            (<bind name="permissionChecks" value="taskPermissionChecks" />
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authorizationCheck" />)
        END ) = 1
    </if>
  </sql>

</mapper>
