<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.batch.history.HistoricBatchEntity">

  <!-- INSERT -->

  <insert id="insertHistoricBatch" parameterType="org.camunda.bpm.engine.impl.batch.history.HistoricBatchEntity">
    insert into ${prefix}ACT_HI_BATCH
    (
      ID_,
      TYPE_,
      TOTAL_JOBS_,
      JOBS_PER_SEED_,
      INVOCATIONS_PER_JOB_,
      SEED_JOB_DEF_ID_,
      MONITOR_JOB_DEF_ID_,
      BATCH_JOB_DEF_ID_,
      TENANT_ID_,
      START_TIME_,
      END_TIME_
    )
    values
    (
      #{id ,jdbcType=VARCHAR},
      #{type, jdbcType=VARCHAR},
      #{totalJobs, jdbcType=INTEGER},
      #{batchJobsPerSeed, jdbcType=INTEGER},
      #{invocationsPerBatchJob, jdbcType=INTEGER},
      #{seedJobDefinitionId, jdbcType=VARCHAR},
      #{monitorJobDefinitionId, jdbcType=VARCHAR},
      #{batchJobDefinitionId, jdbcType=VARCHAR},
      #{tenantId, jdbcType=VARCHAR},
      #{startTime, jdbcType=TIMESTAMP},
      #{endTime, jdbcType=TIMESTAMP}
    )
  </insert>

  <!-- RESULTMAP -->

  <resultMap id="historicBatchResultMap" type="org.camunda.bpm.engine.impl.batch.history.HistoricBatchEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="type" column="TYPE_" jdbcType="VARCHAR" />
    <result property="totalJobs" column="TOTAL_JOBS_" jdbcType="INTEGER" />
    <result property="batchJobsPerSeed" column="JOBS_PER_SEED_" jdbcType="INTEGER" />
    <result property="invocationsPerBatchJob" column="INVOCATIONS_PER_JOB_" jdbcType="INTEGER" />
    <result property="seedJobDefinitionId" column="SEED_JOB_DEF_ID_" jdbcType="VARCHAR" />
    <result property="monitorJobDefinitionId" column="MONITOR_JOB_DEF_ID_" jdbcType="VARCHAR" />
    <result property="batchJobDefinitionId" column="BATCH_JOB_DEF_ID_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
  </resultMap>

  <!-- DELETE -->

  <delete id="deleteHistoricBatch" parameterType="org.camunda.bpm.engine.impl.batch.history.HistoricBatchEntity">
    delete from ${prefix}ACT_HI_BATCH where ID_ = #{id}
  </delete>

  <delete id="deleteHistoricBatchById" parameterType="string">
    delete from ${prefix}ACT_HI_BATCH where ID_ = #{parameter}
  </delete>

  <!-- UPDATE -->
  <update id="updateHistoricBatch" parameterType="org.camunda.bpm.engine.impl.batch.history.HistoricBatchEntity">
    update ${prefix}ACT_HI_BATCH
    <set>
      END_TIME_ = #{endTime, jdbcType=TIMESTAMP},
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
  </update>

  <!-- SELECT -->
  <select id="selectHistoricBatch" parameterType="string" resultMap="historicBatchResultMap">
    select * from ${prefix}ACT_HI_BATCH where ID_ = #{id}
  </select>

  <select id="selectHistoricBatchesByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.batch.history.HistoricBatchQueryImpl" resultMap="historicBatchResultMap">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.*
    ${limitBetween}
    <include refid="selectHistoricBatchesByQueryCriteriaSql"/>
    order by ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricBatchCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.batch.history.HistoricBatchQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectHistoricBatchesByQueryCriteriaSql"/>
  </select>

  <sql id="selectHistoricBatchesByQueryCriteriaSql">
    from ${prefix}ACT_HI_BATCH RES

    <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoin" />

    <where>
      <if test="batchId != null">
        RES.ID_ = #{batchId}
      </if>
      <if test="type != null">
        and RES.TYPE_ = #{type}
      </if>
      <if test="completed != null &amp;&amp; completed">
        and RES.END_TIME_ is not null
      </if>
      <if test="completed != null &amp;&amp; !completed">
        and RES.END_TIME_ is null
      </if>
      <if test="isTenantIdSet">
        <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
          and RES.TENANT_ID_ in
          <foreach item="tenantId" index="index" collection="tenantIds"
                   open="(" separator="," close=")">
            #{tenantId}
          </foreach>
        </if>
        <if test="tenantIds == null">
          and RES.TENANT_ID_ is null
        </if>
      </if>

      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck" />
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />
    </where>
  </sql>

</mapper>
