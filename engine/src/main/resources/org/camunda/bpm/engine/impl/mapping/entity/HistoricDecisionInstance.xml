<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.history.event.HistoricDecisionInstanceEntity">

 <!-- insert -->

 <insert id="insertHistoricDecisionInstance" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricDecisionInstanceEntity">
    insert into ${prefix}ACT_HI_DECINST(
      ID_,
      DEC_DEF_ID_,
      DEC_DEF_KEY_,
      DEC_DEF_NAME_,
      PROC_DEF_KEY_,
      PROC_DEF_ID_,
      PROC_INST_ID_,
      CASE_DEF_KEY_,
      CASE_DEF_ID_,
      CASE_INST_ID_,
      ACT_INST_ID_,
      ACT_ID_,
      EVAL_TIME_,
      COLLECT_VALUE_,
      USER_ID_,
      ROOT_DEC_INST_ID_,
      DEC_REQ_ID_,
      DEC_REQ_KEY_,
      TENANT_ID_)
    values (#{id, jdbcType=VARCHAR},
            #{decisionDefinitionId, jdbcType=VARCHAR},
            #{decisionDefinitionKey, jdbcType=VARCHAR},
            #{decisionDefinitionName, jdbcType=VARCHAR},
            #{processDefinitionKey, jdbcType=VARCHAR},
            #{processDefinitionId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{caseDefinitionKey, jdbcType=VARCHAR},
            #{caseDefinitionId, jdbcType=VARCHAR},
            #{caseInstanceId, jdbcType=VARCHAR},
            #{activityInstanceId, jdbcType=VARCHAR},
            #{activityId, jdbcType=VARCHAR},
            #{evaluationTime, jdbcType=TIMESTAMP},
            #{collectResultValue, jdbcType=DOUBLE},
            #{userId, jdbcType=VARCHAR},
            #{rootDecisionInstanceId, jdbcType=VARCHAR},
            #{decisionRequirementsDefinitionId, jdbcType=VARCHAR},
            #{decisionRequirementsDefinitionKey, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
           )
  </insert>
  
  <!-- delete -->
  
  <delete id="deleteHistoricDecisionInstance" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricDecisionInstanceEntity">
    delete from ${prefix}ACT_HI_DECINST where ID_ = #{id}
  </delete>

  <!-- result map -->

 <resultMap id="historicDecisionInstanceResultMap" type="org.camunda.bpm.engine.impl.history.event.HistoricDecisionInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="decisionDefinitionId" column="DEC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="decisionDefinitionKey" column="DEC_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="decisionDefinitionName" column="DEC_DEF_NAME_" jdbcType="VARCHAR" />
    <result property="processDefinitionKey" column="PROC_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR"/>
    <result property="caseDefinitionKey" column="CASE_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="caseInstanceId" column="CASE_INST_ID_" jdbcType="VARCHAR"/>
    <result property="activityInstanceId" column="ACT_INST_ID_" jdbcType="VARCHAR"/>
    <result property="activityId" column="ACT_ID_" jdbcType="VARCHAR"/>
    <result property="evaluationTime" column="EVAL_TIME_" jdbcType="TIMESTAMP"/>
    <result property="collectResultValue" column="COLLECT_VALUE_" jdbcType="DOUBLE"/>
    <result property="userId" column="USER_ID_" jdbcType="VARCHAR"/>
    <result property="rootDecisionInstanceId" column="ROOT_DEC_INST_ID_" jdbcType="VARCHAR"/>
    <result property="decisionRequirementsDefinitionId" column="DEC_REQ_ID_" jdbcType="VARCHAR"/>
    <result property="decisionRequirementsDefinitionKey" column="DEC_REQ_KEY_" jdbcType="VARCHAR"/>
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR"/>
  </resultMap>

  <!-- select -->

  <select id="selectHistoricDecisionInstancesByDecisionDefinitionId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="historicDecisionInstanceResultMap">
    select * from ${prefix}ACT_HI_DECINST RES
    where DEC_DEF_ID_ = #{parameter, jdbcType=VARCHAR}
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />
  </select>

  <select id="selectHistoricDecisionInstanceByDecisionInstanceId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="historicDecisionInstanceResultMap">
    select * from ${prefix}ACT_HI_DECINST RES
    where ID_ = #{parameter, jdbcType=VARCHAR}
  </select>

  <select id="selectHistoricDecisionInstancesByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricDecisionInstanceQueryImpl" resultMap="historicDecisionInstanceResultMap">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.*
    ${limitBetween}
    <include refid="selectHistoricDecisionInstancesByQueryCriteriaSql"/>
    order by ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricDecisionInstanceCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricDecisionInstanceQueryImpl" resultType="long">
    select count(RES.ID_)
    <include refid="selectHistoricDecisionInstancesByQueryCriteriaSql"/>
  </select>
  
  <!-- native queries -->
  
  <select id="selectHistoricDecisionInstancesByNativeQuery" parameterType="java.util.Map" resultMap="historicDecisionInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectHistoricDecisionInstanceCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>
  
  <!-- special nativ query for mssql and db2 -->
  
  <select id="selectHistoricDecisionInstancesByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="historicDecisionInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
        ${limitBeforeNativeQuery}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>
  
  <!-- sql query -->

  <sql id="selectHistoricDecisionInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_DECINST RES

    <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
      INNER JOIN (
        SELECT
            SELF.DEC_DEF_KEY_ AS KEY_
        FROM
            (SELECT DISTINCT DKEYS.DEC_DEF_KEY_ from ${prefix}ACT_HI_DECINST DKEYS) SELF
        WHERE
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.querySingleAuthorizationCheck" />
      ) AUTH
      ON AUTH.KEY_ = RES.DEC_DEF_KEY_
    </if>

    <where>
      <if test="decisionInstanceId != null">
        RES.ID_ = #{decisionInstanceId}
      </if>
      <if test="decisionInstanceIdIn != null and decisionInstanceIdIn.length > 0">
        and RES.ID_ in
        <foreach item="item" index="index" collection="decisionInstanceIdIn" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="decisionDefinitionId != null">
        and RES.DEC_DEF_ID_ = #{decisionDefinitionId}
      </if>
      <if test="decisionDefinitionIdIn != null and decisionDefinitionIdIn.length > 0">
        and RES.DEC_DEF_ID_ in
        <foreach item="item" index="index" collection="decisionDefinitionIdIn" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="decisionDefinitionKey != null">
        and RES.DEC_DEF_KEY_ = #{decisionDefinitionKey}
      </if>
      <if test="decisionDefinitionKeyIn != null and decisionDefinitionKeyIn.length > 0">
        and RES.DEC_DEF_KEY_ in
        <foreach item="item" index="index" collection="decisionDefinitionKeyIn" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="decisionDefinitionName != null">
        and RES.DEC_DEF_NAME_ = #{decisionDefinitionName}
      </if>
      <if test="processDefinitionKey != null">
        and RES.PROC_DEF_KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="caseDefinitionKey != null">
        and RES.CASE_DEF_KEY_ = #{caseDefinitionKey}
      </if>
      <if test="caseDefinitionId != null">
        and RES.CASE_DEF_ID_ = #{caseDefinitionId}
      </if>
      <if test="caseInstanceId != null">
        and RES.CASE_INST_ID_ = #{caseInstanceId}
      </if>

      <if test="activityInstanceIds != null &amp;&amp; activityInstanceIds.length > 0">
        and RES.ACT_INST_ID_ in
        <foreach item="activityInstanceId" index="index" collection="activityInstanceIds" open="(" separator="," close=")">
          #{activityInstanceId}
        </foreach>
      </if>
      
      <if test="activityIds != null &amp;&amp; activityIds.length > 0">
        and RES.ACT_ID_ in
        <foreach item="activityId" index="index" collection="activityIds" open="(" separator="," close=")">
          #{activityId}
        </foreach>
      </if>
      
      <if test="evaluatedBefore != null">
        and RES.EVAL_TIME_ &lt;= #{evaluatedBefore}
      </if>
      <if test="evaluatedAfter != null">
        and RES.EVAL_TIME_ &gt;= #{evaluatedAfter}
      </if>
      
      <if test="userId != null">
        and RES.USER_ID_ = #{userId} 
      </if>
      
      <if test="rootDecisionInstanceId != null">
        and (RES.ROOT_DEC_INST_ID_ = #{rootDecisionInstanceId} or 
          (RES.ROOT_DEC_INST_ID_ is null and RES.ID_ = #{rootDecisionInstanceId}))
      </if>
      
      <if test="rootDecisionInstancesOnly">
        and RES.ROOT_DEC_INST_ID_ is null
      </if>
      
      <if test="decisionRequirementsDefinitionId != null">
        and RES.DEC_REQ_ID_ = #{decisionRequirementsDefinitionId}
      </if>
      
      <if test="decisionRequirementsDefinitionKey != null">
        and RES.DEC_REQ_KEY_ = #{decisionRequirementsDefinitionKey}
      </if>

      <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
        and RES.TENANT_ID_ in
        <foreach item="tenantId" index="index" collection="tenantIds"
                 open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>

      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />

    </where>
  </sql>

</mapper>
