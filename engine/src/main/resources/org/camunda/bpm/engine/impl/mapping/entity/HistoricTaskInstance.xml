<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">

  <!-- HISTORIC TASK INSTANCE INSERT -->

  <insert id="insertHistoricTaskInstanceEvent" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricTaskInstanceEventEntity">
      insert into ${prefix}ACT_HI_TASKINST (
        ID_,
        PROC_DEF_KEY_,
        PROC_DEF_ID_,
        PROC_INST_ID_,
        EXECUTION_ID_,
        CASE_DEF_KEY_,
        CASE_DEF_ID_,
        CASE_INST_ID_,
        CASE_EXECUTION_ID_,
        ACT_INST_ID_,
        NAME_,
        PARENT_TASK_ID_,
        DESCRIPTION_,
        OWNER_,
        ASSIGNEE_,
        START_TIME_,
        END_TIME_,
        DURATION_,
        DELETE_REASON_,
        TASK_DEF_KEY_,
        PRIORITY_,
        DUE_DATE_,
        FOLLOW_UP_DATE_,
        TENANT_ID_
      ) values (
        #{id ,jdbcType=VARCHAR},
        #{processDefinitionKey, jdbcType=VARCHAR},
        #{processDefinitionId, jdbcType=VARCHAR},
        #{processInstanceId, jdbcType=VARCHAR},
        #{executionId, jdbcType=VARCHAR},
        #{caseDefinitionKey, jdbcType=VARCHAR},
        #{caseDefinitionId, jdbcType=VARCHAR},
        #{caseInstanceId, jdbcType=VARCHAR},
        #{caseExecutionId, jdbcType=VARCHAR},
        #{activityInstanceId, jdbcType=VARCHAR},
        #{name ,jdbcType=VARCHAR},
        #{parentTaskId ,jdbcType=VARCHAR},
        #{description ,jdbcType=VARCHAR},
        #{owner ,jdbcType=VARCHAR},
        #{assignee ,jdbcType=VARCHAR},
        #{startTime, jdbcType=TIMESTAMP},
        #{endTime, jdbcType=TIMESTAMP},
        #{durationInMillis ,jdbcType=BIGINT},
        #{deleteReason ,jdbcType=VARCHAR},
        #{taskDefinitionKey ,jdbcType=VARCHAR},
        #{priority, jdbcType=INTEGER},
        #{dueDate, jdbcType=TIMESTAMP},
        #{followUpDate, jdbcType=TIMESTAMP},
        #{tenantId, jdbcType=VARCHAR}
      )
  </insert>

  <!-- HISTORIC TASK INSTANCE UPDATE -->

  <update id="updateHistoricTaskInstanceEvent" parameterType="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">
    update ${prefix}ACT_HI_TASKINST set
      EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      PROC_DEF_KEY_ = #{processDefinitionKey, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      NAME_ = #{name, jdbcType=VARCHAR},
      PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      OWNER_ = #{owner, jdbcType=VARCHAR},
      ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      DELETE_REASON_ = #{deleteReason ,jdbcType=VARCHAR},
      TASK_DEF_KEY_ = #{taskDefinitionKey ,jdbcType=VARCHAR},
      PRIORITY_ = #{priority, jdbcType=INTEGER},
      DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      FOLLOW_UP_DATE_ = #{followUpDate, jdbcType=TIMESTAMP},
      CASE_INST_ID_ = #{caseInstanceId, jdbcType=VARCHAR}
      <if test="endTime!=null">
        , END_TIME_ = #{endTime, jdbcType=TIMESTAMP}
        , DURATION_ = #{durationInMillis, jdbcType=BIGINT}
      </if>

    where ID_ = #{id, jdbcType=VARCHAR}
  </update>

  <!-- HISTORIC TASK INSTANCE SELECT -->

  <select id="selectHistoricTaskInstanceEvent" parameterType="java.lang.String" resultMap="historicTaskInstanceResultMap">
    select HTI.START_TIME_ from ${prefix}ACT_HI_TASKINST HTI
    where HTI.ID_ = #{id, jdbcType=VARCHAR}
  </select>

  <!-- HISTORIC TASK INSTANCE DELETE -->

  <delete id="deleteHistoricTaskInstance" parameterType="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">
    delete from ${prefix}ACT_HI_TASKINST where ID_ = #{id}
  </delete>

  <!-- HISTORIC TASK INSTANCE RESULT MAP -->

  <resultMap id="historicTaskInstanceResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.HistoricTaskInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionKey" column="PROC_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionKey" column="CASE_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR" />
    <result property="caseInstanceId" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseExecutionId" column="CASE_EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="activityInstanceId" column="ACT_INST_ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER" />
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP" />
    <result property="followUpDate" column="FOLLOW_UP_DATE_" jdbcType="TIMESTAMP" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
  </resultMap>

  <!-- HISTORIC TASK INSTANCE SELECT -->

  <select id="selectHistoricTaskInstance" resultMap="historicTaskInstanceResultMap">
    select * from ${prefix}ACT_HI_TASKINST where ID_ = #{historicTaskInstanceId}
  </select>

  <select id="selectHistoricTaskInstanceIdsByParameters" resultType="string" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject">
    select ID_
    from ${prefix}ACT_HI_TASKINST
    <where>
      <if test="parameter.processInstanceId != null">
        PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.processDefinitionId != null">
        and PROC_DEF_ID_ = #{parameter.processDefinitionId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.caseInstanceId != null">
        and CASE_INST_ID_ = #{parameter.caseInstanceId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.caseDefinitionId != null">
        and CASE_DEF_ID_ = #{parameter.caseDefinitionId, jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <select id="selectHistoricTaskInstancesByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceQueryImpl" resultMap="historicTaskInstanceResultMap">
  	<include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.*
    ${limitBetween}
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricTaskInstanceCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
  </select>

  <sql id="selectHistoricTaskInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_TASKINST RES

    <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
      LEFT JOIN (
        SELECT
            SELF.PROC_DEF_KEY_ AS KEY_
        FROM
            (SELECT DISTINCT DKEYS.PROC_DEF_KEY_ from ${prefix}ACT_HI_TASKINST DKEYS) SELF
        WHERE
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.querySingleAuthorizationCheck" />
      ) AUTH
      ON AUTH.KEY_ = RES.PROC_DEF_KEY_
    </if>

    <if test="processFinished || processUnfinished">
      inner join ${prefix}ACT_HI_PROCINST HPI ON RES.PROC_INST_ID_ = HPI.ID_
    </if>
    <if test="processDefinitionKey != null || processDefinitionName != null">
      inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
    </if>
    <if test="caseDefinitionKey != null || caseDefinitionName != null">
      inner join ${prefix}ACT_RE_CASE_DEF CD on RES.CASE_DEF_ID_ = CD.ID_
    </if>
    <where>

      <if test="taskInvolvedUser != null || taskInvolvedGroup != null || taskHadCandidateUser != null || taskHadCandidateGroup != null || withCandidateGroups">
          RES.ID_ in (select TASK_ID_ from ${prefix}ACT_HI_IDENTITYLINK HIL
          <where>
            <if test= "taskInvolvedUser != null">
              HIL.USER_ID_ = #{taskInvolvedUser}
            </if>
            <if test ="taskInvolvedGroup != null">
             and HIL.GROUP_ID_ = #{taskInvolvedGroup}
            </if>
            <if test="taskHadCandidateUser != null">
             and HIL.TYPE_ = 'candidate' and HIL.USER_ID_ = #{taskHadCandidateUser}
            </if>
            <if test="taskHadCandidateGroup != null">
              and HIL.TYPE_ = 'candidate' and HIL.GROUP_ID_ = #{taskHadCandidateGroup}
            </if>
            <if test="withCandidateGroups">
              and HIL.TYPE_ = 'candidate' and HIL.GROUP_ID_ is not null
            </if>
         </where>
         )
      </if>

      <if test="withoutCandidateGroups">
        RES.ID_ not in (
          select
            TASK_ID_
          from
            ${prefix}ACT_HI_IDENTITYLINK HIL
          <where>
            HIL.TYPE_ = 'candidate' and HIL.GROUP_ID_ is not null
          </where>
        )
      </if>

      <if test="taskId != null">
        RES.ID_ = #{taskId}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="taskDefinitionKeys != null &amp;&amp; taskDefinitionKeys.length > 0">
        and RES.TASK_DEF_KEY_ in
        <foreach item="taskDefinitionKey" index="index" collection="taskDefinitionKeys"
                 open="(" separator="," close=")">
          #{taskDefinitionKey}
        </foreach>
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="activityInstanceIds != null &amp;&amp; activityInstanceIds.length > 0">
        and RES.ACT_INST_ID_ in
        <foreach item="item" index="index" collection="activityInstanceIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="caseDefinitionId != null">
        and RES.CASE_DEF_ID_ = #{caseDefinitionId}
      </if>
      <if test="caseDefinitionKey != null">
        and CD.KEY_ = #{caseDefinitionKey}
      </if>
      <if test="caseDefinitionName != null">
        and CD.NAME_ = #{caseDefinitionName}
      </if>
      <if test="caseInstanceId != null">
        and RES.CASE_INST_ID_ = #{caseInstanceId}
      </if>
      <if test="caseExecutionId != null">
        and RES.CASE_EXECUTION_ID_ = #{caseExecutionId}
      </if>
      <if test="taskName != null">
        and RES.NAME_ = #{taskName}
      </if>
      <if test="taskNameLike != null">
        and RES.NAME_ like #{taskNameLike}
      </if>
      <if test="taskParentTaskId != null">
        and RES.PARENT_TASK_ID_ = #{taskParentTaskId}
      </if>
      <if test="taskDescription != null">
        and RES.DESCRIPTION_ = #{taskDescription}
      </if>
      <if test="taskDescriptionLike != null">
        and RES.DESCRIPTION_ like #{taskDescriptionLike}
      </if>
      <if test="taskDeleteReason != null">
        and RES.DELETE_REASON_ = #{taskDeleteReason}
      </if>
      <if test="taskDeleteReasonLike != null">
        and RES.DELETE_REASON_ like #{taskDeleteReasonLike}
      </if>
      <if test="taskOwner != null">
        and RES.OWNER_ = #{taskOwner}
      </if>
      <if test="taskOwnerLike != null">
        and RES.OWNER_ like #{taskOwnerLike}
      </if>
      <if test="assigned">
        and RES.ASSIGNEE_ is not null
      </if>
      <if test="unassigned">
        and RES.ASSIGNEE_ is null
      </if>
      <if test="taskAssignee != null">
        and RES.ASSIGNEE_ = #{taskAssignee}
      </if>
      <if test="taskAssigneeLike != null">
        and RES.ASSIGNEE_ like #{taskAssigneeLike}
      </if>
      <if test="taskPriority != null">
        and RES.PRIORITY_ = #{taskPriority}
      </if>
      <if test="unfinished">
        and RES.END_TIME_ is null
      </if>
      <if test="finished">
        and RES.END_TIME_ is not null
      </if>
      <if test="processFinished">
        and HPI.END_TIME_ is not null
      </if>
      <if test="processUnfinished">
        and HPI.END_TIME_ is null
      </if>
      <if test="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="dueDate != null || dueBefore != null || dueAfter != null">
        and RES.DUE_DATE_ is not null
      </if>
      <if test="followUpDate != null">
        and RES.FOLLOW_UP_DATE_ = #{followUpDate}
      </if>
      <if test="followUpBefore != null">
        and RES.FOLLOW_UP_DATE_ &lt; #{followUpBefore}
      </if>
      <if test="followUpAfter != null">
        and RES.FOLLOW_UP_DATE_ &gt; #{followUpAfter}
      </if>
      <if test="followUpDate != null || followUpBefore != null || followUpAfter != null">
        and RES.FOLLOW_UP_DATE_ is not null
      </if>
      <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
        and RES.TENANT_ID_ in
        <foreach item="tenantId" index="index" collection="tenantIds"
                 open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>
      <foreach collection="variables" index="index" item="queryVariableValue">
        and ${existsStart} (
          select
            ID_
          from
            ${prefix}ACT_HI_VARINST VAR
          WHERE
            NAME_= #{queryVariableValue.name}
          <choose>
            <when test="queryVariableValue.local">
              and TASK_ID_ = RES.ID_
            </when>
            <otherwise>
              and PROC_INST_ID_ = RES.PROC_INST_ID_ and TASK_ID_ is null
            </otherwise>
          </choose>

          <bind name="varTypeField" value="'VAR_TYPE_'"/>
          <bind name="varPrefix" value="''"/>
          <if test="queryVariableValue.valueConditions != null">
            and
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.variableValueConditions"/>
          </if>
        ) ${existsEnd}
      </foreach>

      <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
        and ((RES.EXECUTION_ID_ is not null and AUTH.KEY_ is not null) or RES.EXECUTION_ID_ is null)
      </if>

      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />

    </where>
  </sql>

  <select id="selectHistoricTaskInstanceByNativeQuery" parameterType="java.util.Map" resultMap="historicTaskInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectHistoricTaskInstanceByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="historicTaskInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
        ${limitBeforeNativeQuery}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectHistoricTaskInstanceCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>
</mapper>
