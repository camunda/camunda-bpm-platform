<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">

  <!-- HISTORIC PROCESS VARIABLE INSERT -->

  <insert id="insertHistoricVariableInstance" parameterType="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
    insert into ${prefix}ACT_HI_VARINST (
      ID_,
      PROC_DEF_KEY_,
      PROC_DEF_ID_,
      PROC_INST_ID_,
      EXECUTION_ID_,
      ACT_INST_ID_,
      TENANT_ID_,
      CASE_DEF_KEY_,
      CASE_DEF_ID_,
      CASE_INST_ID_,
      CASE_EXECUTION_ID_,
      TASK_ID_,
      NAME_,
      REV_,
      VAR_TYPE_,
      BYTEARRAY_ID_,
      DOUBLE_,
      LONG_,
      TEXT_,
      TEXT2_
    ) values (
      #{id, jdbcType=VARCHAR},
      #{processDefinitionKey, jdbcType=VARCHAR},
      #{processDefinitionId, jdbcType=VARCHAR},
      #{processInstanceId, jdbcType=VARCHAR},
      #{executionId, jdbcType=VARCHAR},
      #{activityInstanceId, jdbcType=VARCHAR},
      #{tenantId, jdbcType=VARCHAR},
      #{caseDefinitionKey, jdbcType=VARCHAR},
      #{caseDefinitionId, jdbcType=VARCHAR},
      #{caseInstanceId, jdbcType=VARCHAR},
      #{caseExecutionId, jdbcType=VARCHAR},
      #{taskId, jdbcType=VARCHAR},
      #{variableName, jdbcType=VARCHAR},
      #{revision, jdbcType=VARCHAR},
      #{serializerName, jdbcType=VARCHAR},
      #{byteArrayId, jdbcType=VARCHAR},
      #{doubleValue, jdbcType=DOUBLE},
      #{longValue, jdbcType=BIGINT},
      #{textValue, jdbcType=VARCHAR},
      #{textValue2, jdbcType=VARCHAR}
    )
  </insert>

  <!-- HISTORIC PROCESS VARIABLE UPDATE -->

  <update id="updateHistoricVariableInstance" parameterType="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
    update ${prefix}ACT_HI_VARINST set
      REV_ = #{revisionNext, jdbcType=INTEGER},
      VAR_TYPE_ = #{serializerName, jdbcType=VARCHAR},
      BYTEARRAY_ID_ = #{byteArrayId, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      PROC_DEF_KEY_ = #{processDefinitionKey, jdbcType=VARCHAR},
      DOUBLE_ = #{doubleValue, jdbcType=DOUBLE},
      LONG_ = #{longValue, jdbcType=BIGINT},
      TEXT_ = #{textValue, jdbcType=VARCHAR},
      TEXT2_ = #{textValue2, jdbcType=VARCHAR}
    where ID_ = #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <!-- HISTORIC PROCESS VARIABLE DELETE -->

  <delete id="deleteHistoricVariableInstance" parameterType="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
    delete from ${prefix}ACT_HI_VARINST where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <delete id="deleteHistoricVariableInstanceById">
    delete from ${prefix}ACT_HI_VARINST where ID_ = #{id}
  </delete>

  <!-- HISTORIC PROCESS VARIABLE RESULTMAP -->
  <resultMap id="historicVariableInstanceResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionKey" column="PROC_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="activityInstanceId" column="ACT_INST_ID_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionKey" column="CASE_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR" />
    <result property="caseInstanceId" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseExecutionId" column="CASE_EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="taskId" column="TASK_ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" javaType="String" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="serializerName" column="VAR_TYPE_" jdbcType="VARCHAR"/>
    <result property="byteArrayId" column="BYTEARRAY_ID_" jdbcType="VARCHAR" />
    <result property="doubleValue" column="DOUBLE_" jdbcType="DOUBLE" />
    <result property="textValue" column="TEXT_" jdbcType="VARCHAR" />
    <result property="textValue2" column="TEXT2_" jdbcType="VARCHAR" />
    <result property="longValue" column="LONG_" jdbcType="BIGINT" />
  </resultMap>

  <resultMap id="historicVariableInstanceResultMap_postgres" type="org.camunda.bpm.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionKey" column="PROC_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="activityInstanceId" column="ACT_INST_ID_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionKey" column="CASE_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR" />
    <result property="caseInstanceId" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseExecutionId" column="CASE_EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="taskId" column="TASK_ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" javaType="String" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="serializerName" column="VAR_TYPE_" jdbcType="VARCHAR"/>
    <result property="byteArrayId" column="BYTEARRAY_ID_" jdbcType="VARCHAR" />
    <result property="doubleValue" column="DOUBLE_" jdbcType="DOUBLE" />
    <result property="textValue" column="TEXT_" jdbcType="VARCHAR" />
    <result property="textValue2" column="TEXT2_" jdbcType="VARCHAR" />
    <result property="longValue" column="LONG_" jdbcType="BIGINT" />
  </resultMap>

  <!-- HISTORIC VARIABLE SELECT -->

  <select id="selectHistoricVariablesByProcessInstanceId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="historicVariableInstanceResultMap">
    select * from ${prefix}ACT_HI_VARINST
    where PROC_INST_ID_ = #{parameter, jdbcType=VARCHAR}
  </select>

  <select id="selectHistoricVariablesByCaseInstanceId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="historicVariableInstanceResultMap">
    select * from ${prefix}ACT_HI_VARINST
    where CASE_INST_ID_ = #{parameter, jdbcType=VARCHAR}
  </select>

  <select id="selectHistoricVariableInstanceByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricVariableInstanceQueryImpl" resultMap="historicVariableInstanceResultMap">
  	<include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.*
    ${limitBetween}
    <include refid="selectHistoricVariableInstanceByQueryCriteriaSql"/>
    order by ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricVariableInstanceCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricVariableInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectHistoricVariableInstanceByQueryCriteriaSql"/>
  </select>

  <select id="selectHistoricVariableInstanceByQueryCriteria_postgres" parameterType="org.camunda.bpm.engine.impl.HistoricVariableInstanceQueryImpl" resultMap="historicVariableInstanceResultMap_postgres">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.*
    ${limitBetween}
    <include refid="selectHistoricVariableInstanceByQueryCriteriaSql"/>
    order by ${orderBy}
    ${limitAfter}
  </select>

  <sql id="selectHistoricVariableInstanceByQueryCriteriaSql">
    from ${prefix}ACT_HI_VARINST RES

    <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
      LEFT JOIN (
        SELECT
            SELF.PROC_DEF_KEY_ AS KEY_
        FROM
            (SELECT DISTINCT DKEYS.PROC_DEF_KEY_ from ${prefix}ACT_HI_VARINST DKEYS) SELF
        WHERE
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.querySingleAuthorizationCheck" />
      ) AUTH
      ON AUTH.KEY_ = RES.PROC_DEF_KEY_
    </if>

    <if test="caseActivityIds != null &amp;&amp; caseActivityIds.length > 0">
      INNER JOIN ${prefix}ACT_HI_CASEACTINST HCAI
      ON RES.ACT_INST_ID_ = HCAI.ID_
    </if>

    <where>
      <if test="variableId != null">
        RES.ID_ = #{variableId}
      </if>
      <if test="processInstanceId != null">
        RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="caseInstanceId != null">
        RES.CASE_INST_ID_ = #{caseInstanceId}
      </if>
      <if test="variableName != null">
        and RES.NAME_ = #{variableName}
      </if>
      <if test="variableNameLike != null">
        and RES.NAME_ like #{variableNameLike}
      </if>

      <!-- processInstanceIds -->
      <if test="processInstanceIds != null &amp;&amp; processInstanceIds.length > 0">
        and RES.PROC_INST_ID_ in
        <foreach item="item" index="index" collection="processInstanceIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <!-- taskIds -->
      <if test="taskIds != null &amp;&amp; taskIds.length > 0">
        and RES.TASK_ID_ in
        <foreach item="item" index="index" collection="taskIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <!-- executionIds -->
      <if test="executionIds != null &amp;&amp; executionIds.length > 0">
        and RES.EXECUTION_ID_ in
        <foreach item="item" index="index" collection="executionIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <!-- caseExecutionIds -->
      <if test="caseExecutionIds != null &amp;&amp; caseExecutionIds.length > 0">
        and RES.CASE_EXECUTION_ID_ in
        <foreach item="item" index="index" collection="caseExecutionIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <!-- caseActivityIds -->
      <if test="caseActivityIds != null &amp;&amp; caseActivityIds.length > 0">
        and HCAI.CASE_ACT_ID_ in
        <foreach item="caseActivityId" index="index" collection="caseActivityIds"
                 open="(" separator="," close=")">
          #{caseActivityId}
        </foreach>
      </if>

      <!-- activityInstanceIds -->
      <if test="activityInstanceIds != null &amp;&amp; activityInstanceIds.length > 0">
        and RES.ACT_INST_ID_ in
        <foreach item="item" index="index" collection="activityInstanceIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>

      <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
        and RES.TENANT_ID_ in
        <foreach item="tenantId" index="index" collection="tenantIds"
                 open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>

      <!-- PLEASE NOTE: If you change anything have a look into the Execution, the same query object is used there! -->
      <if test="queryVariableValue != null" >
        <bind name="varTypeField" value="'VAR_TYPE_'"/>
        <bind name="varPrefix" value="'RES.'"/>
        <if test="queryVariableValue.valueConditions != null">
          and
          <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.variableValueConditions"/>
        </if>
      </if>

      <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
        and ((RES.EXECUTION_ID_ is not null and AUTH.KEY_ is not null) or RES.EXECUTION_ID_ is null)
      </if>

      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />

    </where>
  </sql>

  <select id="selectHistoricVariableInstance" resultMap="historicVariableInstanceResultMap">
    select * from ${prefix}ACT_HI_VARINST where ID_ = #{id}
  </select>

  <select id="selectHistoricVariableInstanceByVariableInstanceId" resultMap="historicVariableInstanceResultMap">
    select * from ${prefix}ACT_HI_VARINST where ID_ = #{variableInstanceId}
  </select>

</mapper>
