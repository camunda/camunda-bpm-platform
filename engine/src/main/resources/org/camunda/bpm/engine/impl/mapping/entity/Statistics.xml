<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionStatisticsEntity">

  <!-- RESULTMAP -->

  <resultMap id="processDefinitionStatisticsResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.ProcessDefinitionStatisticsEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="instances" column="INSTANCE_COUNT_" jdbcType="INTEGER" />
    <result property="failedJobs" column="FAILED_JOBS_COUNT_" jdbcType="INTEGER" />
    <result property="revision" column="REV_" />
    <result property="category" column="CATEGORY_" />
    <result property="name" column="NAME_" />
    <result property="key" column="KEY_" jdbcType="VARCHAR" />
    <result property="version" column="VERSION_" jdbcType="INTEGER"/>
    <result property="deploymentId" column="DEPLOYMENT_ID_" jdbcType="VARCHAR"/>
    <result property="resourceName" column="RESOURCE_NAME_" jdbcType="VARCHAR"/>
    <result property="diagramResourceName" column="DGRM_RESOURCE_NAME_" jdbcType="VARCHAR"/>
    <result property="hasStartFormKey" column="HAS_START_FORM_KEY_" jdbcType="BOOLEAN"/>
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER"/>
    <collection property="incidentStatistics" javaType="ArrayList" ofType="org.camunda.bpm.engine.impl.persistence.entity.IncidentStatisticsEntity">
      <result property="incidentType" column="INCIDENT_TYPE_" jdbcType="VARCHAR" />
      <result property="incidentCount" column="INCIDENT_COUNT_" jdbcType="INTEGER"/>
    </collection>
  </resultMap>

  <resultMap id="deploymentStatisticsResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.DeploymentStatisticsEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="deploymentTime" column="DEPLOY_TIME_" jdbcType="TIMESTAMP"/>
    <result property="instances" column="INSTANCE_COUNT_" jdbcType="INTEGER" />
    <result property="failedJobs" column="FAILED_JOBS_COUNT_" jdbcType="INTEGER" />
    <collection property="incidentStatistics" javaType="ArrayList" ofType="org.camunda.bpm.engine.impl.persistence.entity.IncidentStatisticsEntity">
      <result property="incidentType" column="INCIDENT_TYPE_" jdbcType="VARCHAR" />
      <result property="incidentCount" column="INCIDENT_COUNT_" jdbcType="INTEGER"/>
    </collection>
  </resultMap>

  <resultMap id="activityStatisticsResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.ActivityStatisticsImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="instances" column="INSTANCE_COUNT_" jdbcType="INTEGER" />
    <result property="failedJobs" column="FAILED_JOBS_COUNT_" jdbcType="INTEGER" />
    <collection property="incidentStatistics" javaType="ArrayList" ofType="org.camunda.bpm.engine.impl.persistence.entity.IncidentStatisticsEntity">
      <result property="incidentType" column="INCIDENT_TYPE_" jdbcType="VARCHAR" />
      <result property="incidentCount" column="INCIDENT_COUNT_" jdbcType="INTEGER"/>
    </collection>
  </resultMap>

  <!-- Process Definition Statistics -->  
  <select id ="selectProcessDefinitionStatistics" resultMap="processDefinitionStatisticsResultMap" 
    parameterType="org.camunda.bpm.engine.impl.ProcessDefinitionStatisticsQueryImpl">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.* 
    ${limitBetween}
    <include refid="selectProcessDefinitionStatisticsByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id ="selectProcessDefinitionStatisticsCount" resultType="long" 
    parameterType="org.camunda.bpm.engine.impl.ProcessDefinitionStatisticsQueryImpl">
    select count(RES.ID_) 
    <include refid="selectProcessDefinitionStatisticsByQueryCriteriaSql"/>
  </select>

  <sql id="selectProcessDefinitionStatisticsByQueryCriteriaSql">
    from
        (
          select
              PROCDEF.*
            , INSTANCE.INSTANCE_COUNT_
            <if test="failedJobsToInclude">
            , JOB.FAILED_JOBS_COUNT_
            </if>
            <if test="incidentsToInclude">
            , INC.INCIDENT_TYPE_
            , INC.INCIDENT_COUNT_
            </if>
          <!-- Join process definitions with data about running instances and failed jobs -->
          from
              ${prefix}ACT_RE_PROCDEF PROCDEF

          <!-- instances -->
          left outer join
              <!-- Count and group all process instances (executions that have ID_ = PROC_INST_ID_) by process definition -->
              (
                select
                    E.PROC_DEF_ID_
                  , count(E.PROC_INST_ID_) as INSTANCE_COUNT_
                from
                    ${prefix}ACT_RU_EXECUTION E

                <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                inner join
                    ${prefix}ACT_RE_PROCDEF P
                on
                    E.PROC_DEF_ID_ = P.ID_
                </if>

                where
                    E.PARENT_ID_ IS NULL

                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" collection="processInstancePermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" collection="processInstancePermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>

                group by
                    E.PROC_DEF_ID_
              ) INSTANCE
          on
              PROCDEF.ID_ = INSTANCE.PROC_DEF_ID_

          <!-- failed jobs -->
          <if test="failedJobsToInclude">
          left outer join
              <!-- Sum all failed jobs (i.e. RETRIES_ = 0) grouped by process definition -->
              (
                select
                    J.PROCESS_DEF_ID_ AS PROC_DEF_ID_
                  , count(J.ID_) as FAILED_JOBS_COUNT_
                from
                    ${prefix}ACT_RU_JOB J
                where
                    J.RETRIES_ = 0

                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" collection="jobPermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" collection="jobPermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>

                group by
                    J.PROCESS_DEF_ID_
              ) JOB
          on
              PROCDEF.ID_ = JOB.PROC_DEF_ID_
          </if>

          <!-- incidents -->
          <if test="incidentsToInclude">
          left outer join
              <!-- Sum all incidents grouped by process definition and incident type-->
              (
                select
                    I.PROC_DEF_ID_
                  , I.INCIDENT_TYPE_
                  , count(I.ID_) as INCIDENT_COUNT_
                from
                    ${prefix}ACT_RU_INCIDENT I

                <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                inner join
                    ${prefix}ACT_RE_PROCDEF PROCDEF
                on
                    I.PROC_DEF_ID_ = PROCDEF.ID_
                </if>
                <where>

                  <if test="includeIncidentsForType != null">
                      I.INCIDENT_TYPE_ = #{includeIncidentsForType}
                  </if>

                  <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                  and
                      (
                      <foreach item="permCheck" collection="incidentPermissionChecks" separator=",">
                        ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                      </foreach>
                        , 0
                      <foreach item="permCheck" collection="incidentPermissionChecks">
                        )
                      </foreach>
                      ) = 1
                  </if>

                </where>
                group by
                    I.PROC_DEF_ID_, I.INCIDENT_TYPE_
              ) INC
          on
              PROCDEF.ID_ = INC.PROC_DEF_ID_
          </if>

          <where>
            <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck" />
          </where>

        ) RES
  </sql>

  <!-- Deployment statistics -->
  <select id ="selectDeploymentStatistics" resultMap="deploymentStatisticsResultMap"
    parameterType="org.camunda.bpm.engine.impl.DeploymentStatisticsQueryImpl">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.* 
    ${limitBetween}
    <include refid="selectDeploymentStatisticsByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id ="selectDeploymentStatisticsCount" resultType="long"
    parameterType="org.camunda.bpm.engine.impl.DeploymentStatisticsQueryImpl">
    select count(RES.ID_) 
    <include refid="selectDeploymentStatisticsByQueryCriteriaSql"/>
  </select>

  <sql id="selectDeploymentStatisticsByQueryCriteriaSql">
    from (
            select
                DEPLOYMENT.*
              , INSTANCE.INSTANCE_COUNT_
              <if test="failedJobsToInclude">
              , JOB.FAILED_JOBS_COUNT_
              </if>
              <if test="incidentsToInclude">
              , INC.INCIDENT_TYPE_
              , INC.INCIDENT_COUNT_
              </if>
            from
                ${prefix}ACT_RE_DEPLOYMENT DEPLOYMENT

            <!-- Join process definitions with data about running instances and failed jobs -->

            left outer join

                <!-- Count and group all process instances (executions that have ID_ = PROC_INST_ID_) by deployment -->
                (
                  select
                      PROCDEF.DEPLOYMENT_ID_
                    , count(EXECUTION.PROC_INST_ID_) as INSTANCE_COUNT_
                  from
                      ${prefix}ACT_RU_EXECUTION EXECUTION,
                      ${prefix}ACT_RE_PROCDEF PROCDEF
                  where
                      EXECUTION.ID_ = EXECUTION.PROC_INST_ID_
                      and EXECUTION.PROC_DEF_ID_ = PROCDEF.ID_

                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" collection="processInstancePermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" collection="processInstancePermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>

                  group by
                      PROCDEF.DEPLOYMENT_ID_
                ) INSTANCE
            on
                DEPLOYMENT.ID_ = INSTANCE.DEPLOYMENT_ID_

            <!-- failed jobs -->
            <if test="failedJobsToInclude">
            left outer join

                <!-- Sum all failed jobs (i.e. RETRIES_ = 0) grouped by deployment -->
                (
                  select
                      DEPLOYMENT_ID_
                    , count(ID_) as FAILED_JOBS_COUNT_
                  from
                      ${prefix}ACT_RU_JOB JOB
                  where
                      RETRIES_ = 0

                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" collection="jobPermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" collection="jobPermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>

                  group by
                      DEPLOYMENT_ID_
                ) JOB
            on
                DEPLOYMENT.ID_ = JOB.DEPLOYMENT_ID_
            </if>

            <!-- incidents -->
            <if test="incidentsToInclude">
            left outer join

                <!-- Sum all incidents by deployment -->
                (
                  select
                      PROCDEF.DEPLOYMENT_ID_
                    , INC.INCIDENT_TYPE_
                    , count(INC.ID_) as INCIDENT_COUNT_
                  from
                      ${prefix}ACT_RU_INCIDENT INC,
                      ${prefix}ACT_RE_PROCDEF PROCDEF
                  where
                      INC.PROC_DEF_ID_ = PROCDEF.ID_
                      <if test="includeIncidentsForType != null">
                      and INC.INCIDENT_TYPE_ = #{includeIncidentsForType}
                      </if>

                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" collection="incidentPermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" collection="incidentPermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>

                  group by
                      PROCDEF.DEPLOYMENT_ID_, INC.INCIDENT_TYPE_
                ) INC
            on
                 DEPLOYMENT.ID_ = INC.DEPLOYMENT_ID_
            </if>

            <where>
              <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck" />
            </where>

          ) RES
  </sql>

  <!-- Activity statistics -->

  <select id ="selectActivityStatistics" resultMap="activityStatisticsResultMap" 
    parameterType="org.camunda.bpm.engine.impl.ActivityStatisticsQueryImpl">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.* 
    ${limitBetween}
    <include refid="selectActivityStatisticsByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id ="selectActivityStatisticsCount" resultType="long" 
    parameterType="org.camunda.bpm.engine.impl.ActivityStatisticsQueryImpl">
    select count(RES.ID_)
    <include refid="selectActivityStatisticsByQueryCriteriaSql"/>
  </select>

  <sql id="selectActivityStatisticsByQueryCriteriaSql">
      from ( select ACTID.ACT_ID_ as ID_,
        INSTANCE.INSTANCE_COUNT_
      <if test="failedJobsToInclude">
      , JOB.FAILED_JOBS_COUNT_
      </if>
      <if test="incidentsToInclude">
      , INC.INCIDENT_TYPE_
      , INC.INCIDENT_COUNT_
      </if>

        from

          <!-- collect activity ids -->
          (
            select
                distinct ACT_ID_
            from
                (
                  select
                      distinct E.ACT_ID_
                  from
                      ${prefix}ACT_RU_EXECUTION E
                  <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                  inner join
                      ${prefix}ACT_RE_PROCDEF P
                  on
                      E.PROC_DEF_ID_ = P.ID_
                  </if>
                  where
                      E.PROC_DEF_ID_ = #{processDefinitionId}
                      and E.IS_ACTIVE_ = ${trueConstant}

                      <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                      and
                          (
                          <foreach item="permCheck" index="index" collection="processInstancePermissionChecks" separator=",">
                            ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                          </foreach>
                            , 0
                          <foreach item="permCheck" index="index" collection="processInstancePermissionChecks">
                            )
                          </foreach>
                          ) = 1
                      </if>

                  <if test="failedJobsToInclude">
                  UNION
                      select
                          distinct JOBDEF.ACT_ID_
                      from
                          ${prefix}ACT_RU_JOB JOB
                      inner join
                          ${prefix}ACT_RU_JOBDEF JOBDEF
                      on
                          JOB.JOB_DEF_ID_ = JOBDEF.ID_
                      where
                          JOB.PROCESS_DEF_ID_ = #{processDefinitionId}
                          and JOB.RETRIES_ = 0
                          <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                          and
                              (
                              <foreach item="permCheck" index="index" collection="jobPermissionChecks" separator=",">
                                ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                              </foreach>
                                , 0
                              <foreach item="permCheck" index="index" collection="jobPermissionChecks">
                                )
                              </foreach>
                              ) = 1
                          </if>
                  </if>

                  <if test="incidentsToInclude">
                  UNION
                      select
                          distinct I.ACTIVITY_ID_ AS ACT_ID_
                      from
                          ${prefix}ACT_RU_INCIDENT I
                      <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                      inner join
                          ${prefix}ACT_RE_PROCDEF PROCDEF
                      on
                          I.PROC_DEF_ID_ = PROCDEF.ID_
                      </if>
                      where
                          I.PROC_DEF_ID_ = #{processDefinitionId}
                          and I.ACTIVITY_ID_ is not null
                          <if test="includeIncidentsForType != null">
                          and I.INCIDENT_TYPE_ = #{includeIncidentsForType}
                          </if>

                          <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                          and
                              (
                              <foreach item="permCheck" index="index" collection="incidentPermissionChecks" separator=",">
                                ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                              </foreach>
                                , 0
                              <foreach item="permCheck" index="index" collection="incidentPermissionChecks">
                                )
                              </foreach>
                              ) = 1
                          </if>
                  </if>

                ) ACTID
          ) ACTID

          left outer join

                <!-- Count and group all activity instances by activity ids.
                The executions that are actual activity instances can be found with the IS_ACTIVE_.
                This will not count parent executions such as the process instance itself. -->
                (
                 select
                     E.ACT_ID_
                   , count(E.PROC_INST_ID_) as INSTANCE_COUNT_
                   from
                    ${prefix}ACT_RU_EXECUTION E
                  <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                  inner join
                      ${prefix}ACT_RE_PROCDEF P
                  on
                      E.PROC_DEF_ID_ = P.ID_
                  </if>
                   where
                    E.PROC_DEF_ID_ = #{processDefinitionId}
                    and E.IS_ACTIVE_ = ${trueConstant}
                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" index="index" collection="processInstancePermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" index="index" collection="processInstancePermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>
                   group by
                    E.ACT_ID_
               ) INSTANCE
          on
              ACTID.ACT_ID_ = INSTANCE.ACT_ID_

          <!-- failedJobs -->
            <if test="failedJobsToInclude">
            left outer join

                <!-- Sum all failed jobs grouped by activity id -->
                (
                select
                    JOBDEF.ACT_ID_
                  , count(JOB.ID_) as FAILED_JOBS_COUNT_
                from
                    ${prefix}ACT_RU_JOB JOB
                inner join
                    ${prefix}ACT_RU_JOBDEF JOBDEF
                on
                    JOB.JOB_DEF_ID_ = JOBDEF.ID_
                where
                    JOB.PROCESS_DEF_ID_ = #{processDefinitionId}
                    and JOB.RETRIES_ = 0
                    <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                    and
                        (
                        <foreach item="permCheck" index="index" collection="jobPermissionChecks" separator=",">
                          ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                        </foreach>
                          , 0
                        <foreach item="permCheck" index="index" collection="jobPermissionChecks">
                          )
                        </foreach>
                        ) = 1
                    </if>
                group by
                    JOBDEF.ACT_ID_
              ) JOB

            on ACTID.ACT_ID_ = JOB.ACT_ID_
            </if>

        <!-- incidents -->
        <if test="incidentsToInclude">
        left outer join

            <!-- Sum all incidents grouped by activity id -->
            (
              select
                  I.ACTIVITY_ID_
                , I.INCIDENT_TYPE_
                , count(I.ID_) as INCIDENT_COUNT_
              from
                  ${prefix}ACT_RU_INCIDENT I
              <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
              inner join
                  ${prefix}ACT_RE_PROCDEF PROCDEF
              on
                  I.PROC_DEF_ID_ = PROCDEF.ID_
              </if>
              where
                  I.PROC_DEF_ID_ = #{processDefinitionId}
                  <if test="includeIncidentsForType != null">
                  and I.INCIDENT_TYPE_ = #{includeIncidentsForType}
                  </if>
                  <if test="isAuthorizationCheckEnabled &amp;&amp; authUserId != null">
                  and
                      (
                      <foreach item="permCheck" index="index" collection="incidentPermissionChecks" separator=",">
                        ${dbSpecificIfNullFunction}((<include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheck"/>)
                      </foreach>
                        , 0
                      <foreach item="permCheck" index="index" collection="incidentPermissionChecks">
                        )
                      </foreach>
                      ) = 1
                  </if>
              group by
                  I.ACTIVITY_ID_, I.INCIDENT_TYPE_
            ) INC

        on ACTID.ACT_ID_ = INC.ACTIVITY_ID_
        </if>
       ) RES
  </sql>

</mapper>
