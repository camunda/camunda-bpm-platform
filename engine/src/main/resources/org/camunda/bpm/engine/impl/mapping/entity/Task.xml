<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">

  <!-- TASK INSERT -->

  <insert id="insertTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    insert into ${prefix}ACT_RU_TASK (
      ID_,
      NAME_,
      PARENT_TASK_ID_,
      DESCRIPTION_,
      PRIORITY_,
      CREATE_TIME_,
      OWNER_,
      ASSIGNEE_,
      DELEGATION_,
      EXECUTION_ID_,
      PROC_INST_ID_,
      PROC_DEF_ID_,
      CASE_EXECUTION_ID_,
      CASE_INST_ID_,
      CASE_DEF_ID_,
      TASK_DEF_KEY_,
      DUE_DATE_,
      FOLLOW_UP_DATE_,
      SUSPENSION_STATE_,
      TENANT_ID_,
      REV_
    ) values (
      #{id, jdbcType=VARCHAR},
      #{name, jdbcType=VARCHAR},
      #{parentTaskId, jdbcType=VARCHAR},
      #{description, jdbcType=VARCHAR},
      #{priority, jdbcType=INTEGER},
      #{createTime, jdbcType=TIMESTAMP},
      #{owner, jdbcType=VARCHAR},
      #{assignee, jdbcType=VARCHAR},
      #{delegationStateString, jdbcType=VARCHAR},
      #{executionId, jdbcType=VARCHAR},
      #{processInstanceId, jdbcType=VARCHAR},
      #{processDefinitionId, jdbcType=VARCHAR},
      #{caseExecutionId, jdbcType=VARCHAR},
      #{caseInstanceId, jdbcType=VARCHAR},
      #{caseDefinitionId, jdbcType=VARCHAR},
      #{taskDefinitionKey, jdbcType=VARCHAR},
      #{dueDate, jdbcType=TIMESTAMP},
      #{followUpDate, jdbcType=TIMESTAMP},
      #{suspensionState, jdbcType=INTEGER},
      #{tenantId, jdbcType=VARCHAR},
      1
    )
  </insert>

  <!-- TASK UPDATE -->

  <update id="updateTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    update ${prefix}ACT_RU_TASK
    <set>
      REV_ = #{revisionNext, jdbcType=INTEGER},
      NAME_ = #{name, jdbcType=VARCHAR},
      PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      PRIORITY_ = #{priority, jdbcType=INTEGER},
      CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},
      OWNER_ = #{owner, jdbcType=VARCHAR},
      ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},
      EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      CASE_EXECUTION_ID_ = #{caseExecutionId, jdbcType=VARCHAR},
      CASE_INST_ID_ = #{caseInstanceId, jdbcType=VARCHAR},
      CASE_DEF_ID_ = #{caseDefinitionId, jdbcType=VARCHAR},
      TASK_DEF_KEY_ = #{taskDefinitionKey, jdbcType=VARCHAR},
      DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      FOLLOW_UP_DATE_ = #{followUpDate, jdbcType=TIMESTAMP},
      SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <update id="updateTaskSuspensionStateByParameters" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject">
    update ${prefix}ACT_RU_TASK set
      REV_ = REV_ + 1,
      SUSPENSION_STATE_ = #{parameter.suspensionState, jdbcType=INTEGER}
    <where>
      <if test="parameter.processInstanceId != null">
        PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.processDefinitionId != null">
        PROC_DEF_ID_ = #{parameter.processDefinitionId, jdbcType=VARCHAR}
      </if>
      <if test="parameter.processDefinitionKey != null">
        PROC_DEF_ID_ IN (
          SELECT ID_ 
          FROM ${prefix}ACT_RE_PROCDEF PD
          WHERE PD.KEY_ = #{parameter.processDefinitionKey, jdbcType=VARCHAR}
          <if test="parameter.isProcessDefinitionTenantIdSet">
            <if test="parameter.processDefinitionTenantId != null">
              and PD.TENANT_ID_ = #{parameter.processDefinitionTenantId, jdbcType=VARCHAR}
            </if>
            <if test="parameter.processDefinitionTenantId == null">
              and PD.TENANT_ID_ is null
            </if>
          </if>
        )
        <bind name="columnPrefix" value="''"/>
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
      </if>
      <if test="parameter.caseExecutionId != null">
        CASE_EXECUTION_ID_ = #{parameter.caseExecutionId, jdbcType=VARCHAR}
      </if>
    </where>
  </update>

  <!-- TASK DELETE -->
  <delete id="deleteTask" parameterType="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    delete from ${prefix}ACT_RU_TASK where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <!-- TASK RESULTMAP -->

  <resultMap id="taskResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.TaskEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="nameWithoutCascade" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskIdWithoutCascade" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="descriptionWithoutCascade" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priorityWithoutCascade" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="ownerWithoutCascade" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assigneeWithoutCascade" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="caseExecutionId" column="CASE_EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="caseInstanceIdWithoutCascade" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKeyWithoutCascade" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDateWithoutCascade" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="followUpDateWithoutCascade" column="FOLLOW_UP_DATE_" jdbcType="TIMESTAMP"/>
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <!-- note: if you add mappings here, make sure to select the columns in 'columnSelection' -->
  </resultMap>

  <!-- TASK SELECT -->

  <select id="selectTask" parameterType="string" resultMap="taskResultMap">
   select * from ${prefix}ACT_RU_TASK where ID_ = #{id}
  </select>

  <select id="selectTasksByParentTaskId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK where PARENT_TASK_ID_ = #{parameter}
  </select>

  <select id="selectTasksByExecutionId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectTaskByCaseExecutionId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.CASE_EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectTasksByProcessInstanceId" parameterType="org.camunda.bpm.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectTaskByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.TaskQueryImpl" resultMap="taskResultMap">
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct}
    <include refid="columnSelection"/>
    ${limitBetween}
    <if test="taskNameCaseInsensitive">
      , lower(RES.NAME_) LOWER_NAME_
    </if>
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.orderBySelection"/>
    <include refid="selectTaskByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectTaskCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.TaskQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectTaskByQueryCriteriaSql"/>
  </select>
  
  <sql id="columnSelection">
    RES.REV_, RES.ID_, RES.NAME_, RES.PARENT_TASK_ID_, RES.DESCRIPTION_, RES.PRIORITY_,
    RES.CREATE_TIME_, RES.OWNER_, RES.ASSIGNEE_, RES.DELEGATION_, RES.EXECUTION_ID_,
    RES.PROC_INST_ID_, RES.PROC_DEF_ID_, RES.CASE_EXECUTION_ID_, RES.CASE_INST_ID_,
    RES.CASE_DEF_ID_, RES.TASK_DEF_KEY_, RES.DUE_DATE_, RES.FOLLOW_UP_DATE_,
    RES.SUSPENSION_STATE_, RES.TENANT_ID_
  </sql>

  <sql id="selectTaskByQueryCriteriaSql">
    from ${prefix}ACT_RU_TASK RES
    <if test="candidateUser != null || candidateGroups != null || involvedUser != null || withCandidateGroups">
      inner join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_
    </if>
    <if test="processDefinitionKey != null || processDefinitionName != null || processDefinitionNameLike != null ||
              (processDefinitionKeys != null &amp;&amp; processDefinitionKeys.length > 0)">
      inner join ${prefix}ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
    </if>
    <if test="processInstanceBusinessKey != null || processInstanceBusinessKeyLike != null ||
              (processInstanceBusinessKeys != null &amp;&amp; processInstanceBusinessKeys.length > 0)">
        inner join ${prefix}ACT_RU_EXECUTION E on RES.PROC_INST_ID_ = E.ID_
    </if>
    <if test="caseDefinitionKey != null || caseDefinitionName != null || caseDefinitionNameLike != null">
      inner join ${prefix}ACT_RE_CASE_DEF CD on RES.CASE_DEF_ID_ = CD.ID_
    </if>
    <if test="caseInstanceBusinessKey != null || caseInstanceBusinessKeyLike != null">
        inner join ${prefix}ACT_RU_CASE_EXECUTION CE on RES.CASE_INST_ID_ = CE.ID_
    </if>
    <if test="activityInstanceIdIn != null &amp;&amp; activityInstanceIdIn.length > 0">
        left join ${prefix}ACT_RU_EXECUTION E1 on RES.EXECUTION_ID_ = E1.ID_
    </if>

    <if test="authCheck.isAuthorizationCheckEnabled &amp;&amp; authCheck.authUserId != null">
      left join ${prefix}ACT_RE_PROCDEF PROCDEF
      on RES.PROC_DEF_ID_ = PROCDEF.ID_           
      <if test="!authCheck.revokeAuthorizationCheckEnabled">    
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoinWithoutOnClause" /> 
        AUTH ON (AUTH.RESOURCE_ID_ in (RES.ID_, PROCDEF.KEY_, '*'))      
      </if>
    </if>
    
    <foreach collection="orderingProperties" item="orderingProperty" index="i">
      <if test="orderingProperty.relation != null">
        <bind name="tableAlias" value="@org.camunda.bpm.engine.impl.db.sql.MybatisJoinHelper@tableAlias(orderingProperty.relation, i)"/>
        left join 
        ${prefix}${@org.camunda.bpm.engine.impl.db.sql.MybatisJoinHelper@tableMapping(orderingProperty.relation)} 
        ${tableAlias}
        on
        <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.filterOrderByRelations"/>
      </if>
    </foreach>
    <where>
      <if test="taskId != null">
        RES.ID_ = #{taskId}
      </if>
      <if test="name != null">
        <!-- based on CAM-6363 compare name case insensitive -->
        and UPPER(RES.NAME_) = UPPER(#{name})
      </if>
      <if test="nameLike != null">
        <!-- based on CAM-6165 compare name like case insensitive -->
        and UPPER(RES.NAME_) like UPPER(#{nameLike})
      </if>
      <if test="description != null">
        and RES.DESCRIPTION_ = #{description}
      </if>
      <if test="descriptionLike != null">
        and RES.DESCRIPTION_ like #{descriptionLike}
      </if>
      <if test="priority != null">
        and RES.PRIORITY_ = #{priority}
      </if> 
      <if test="minPriority != null">
        and RES.PRIORITY_ &gt;= #{minPriority}
      </if> 
      <if test="maxPriority != null">
        and RES.PRIORITY_ &lt;= #{maxPriority}
      </if> 
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>
      <if test="assigneeLike != null">
        and RES.ASSIGNEE_ like #{assigneeLike}
      </if>
      <if test="owner != null">
        and RES.OWNER_ = #{owner}
      </if>
      <if test="unassigned">
        and RES.ASSIGNEE_ IS NULL
      </if>
      <if test="assigned">
        and RES.ASSIGNEE_ IS NOT NULL
      </if>
      <if test="noDelegationState">
        and RES.DELEGATION_ IS NULL
      </if>
      <if test="delegationState != null">
        and RES.DELEGATION_ = #{delegationStateString}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceBusinessKey != null">
        and E.BUSINESS_KEY_ = #{processInstanceBusinessKey}
      </if>
      <if test="processInstanceBusinessKeys != null &amp;&amp; processInstanceBusinessKeys.length > 0">
        and E.BUSINESS_KEY_ in
        <foreach item="item" index="index" collection="processInstanceBusinessKeys"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processInstanceBusinessKeyLike != null">
        and E.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="caseInstanceId != null">
        and RES.CASE_INST_ID_ = #{caseInstanceId}
      </if>
      <if test="caseInstanceBusinessKey != null">
        and CE.BUSINESS_KEY_ = #{caseInstanceBusinessKey}
      </if>
      <if test="caseInstanceBusinessKeyLike != null">
        and CE.BUSINESS_KEY_ like #{caseInstanceBusinessKeyLike}
      </if>
      <if test="caseExecutionId != null">
        and RES.CASE_EXECUTION_ID_ = #{caseExecutionId}
      </if>
      <if test="createTime != null">
        and RES.CREATE_TIME_ = #{createTime}
      </if>
      <if test="createTimeBefore != null">
        and RES.CREATE_TIME_ &lt; #{createTimeBefore}
      </if>
      <if test="createTimeAfter != null">
        and RES.CREATE_TIME_ &gt; #{createTimeAfter}
      </if>
      <if test="key != null">
        and RES.TASK_DEF_KEY_ = #{key}
      </if>
      <if test="keyLike != null">
        and RES.TASK_DEF_KEY_ like #{keyLike}
      </if>
      <if test="parentTaskId != null">
        and RES.PARENT_TASK_ID_ = #{parentTaskId}
      </if>
      <if test ="taskDefinitionKeys != null &amp;&amp; taskDefinitionKeys.length > 0">
        and RES.TASK_DEF_KEY_ in
        <foreach item="item" index="index" collection="taskDefinitionKeys"
                       open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </if>
      <if test="processDefinitionKeys != null &amp;&amp; processDefinitionKeys.length > 0">
        and D.KEY_ in
        <foreach item="item" index="index" collection="processDefinitionKeys"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </if>
      <if test="processDefinitionNameLike != null">
        and D.NAME_ like #{processDefinitionNameLike}
      </if>
      <if test="caseDefinitionId != null">
        and RES.CASE_DEF_ID_ = #{caseDefinitionId}
      </if>
      <if test="caseDefinitionKey != null">
        and CD.KEY_ = #{caseDefinitionKey}
      </if>
      <if test="caseDefinitionName != null">
        and CD.NAME_ = #{caseDefinitionName}
      </if>
      <if test="caseDefinitionNameLike != null">
        and CD.NAME_ like #{caseDefinitionNameLike}
      </if>
      <if test="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="dueDate != null || dueBefore != null || dueAfter != null">
        and RES.DUE_DATE_ is not null
      </if>
      <if test="followUpDate != null">
        and RES.FOLLOW_UP_DATE_ = #{followUpDate}
      </if>
      <if test="followUpBefore != null &amp;&amp; !followUpNullAccepted">
          and RES.FOLLOW_UP_DATE_ &lt; #{followUpBefore}
      </if>
      <if test="followUpBefore != null &amp;&amp; followUpNullAccepted">
          and (RES.FOLLOW_UP_DATE_ IS NULL OR RES.FOLLOW_UP_DATE_ &lt; #{followUpBefore})
      </if>
      <if test="followUpAfter != null">
        and RES.FOLLOW_UP_DATE_ &gt; #{followUpAfter}
      </if>
      <if test="(followUpDate != null || followUpBefore != null || followUpAfter != null) &amp;&amp; !followUpNullAccepted">
        and RES.FOLLOW_UP_DATE_ is not null
      </if>
      <if test="excludeSubtasks">
        and RES.PARENT_TASK_ID_ IS NULL
      </if>
      <if test="activityInstanceIdIn != null &amp;&amp; activityInstanceIdIn.length > 0">
        and E1.ACT_INST_ID_ in
        <foreach item="item" index="index" collection="activityInstanceIdIn"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="isTenantIdSet">
        <if test="tenantIds != null &amp;&amp; tenantIds.length > 0">
          and RES.TENANT_ID_ in
          <foreach item="tenantId" index="index" collection="tenantIds"
                   open="(" separator="," close=")">
            #{tenantId}
          </foreach>
        </if>
        <if test="tenantIds == null">
          and RES.TENANT_ID_ is null
        </if>
      </if>
      <if test="candidateUser != null || candidateGroups != null || withCandidateGroups">
        <if test="!includeAssignedTasks">
          and RES.ASSIGNEE_ is null
        </if>
        and I.TYPE_ = 'candidate'
        <if test="candidateUser != null || candidateGroups != null">
          and
          (
          <if test="candidateUser != null">
            I.USER_ID_ = #{candidateUser}
          </if>
          <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            or
          </if>
          <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            I.GROUP_ID_ IN
            <foreach item="group" index="index" collection="candidateGroups"
                     open="(" separator="," close=")">
              #{group}
            </foreach>
          </if>
          )
        </if>

        <if test="withCandidateGroups">
          and I.GROUP_ID_ is not null
        </if>

      </if>

      <if test="withoutCandidateGroups">
        <if test="!includeAssignedTasks">
          and RES.ASSIGNEE_ is null
        </if>
        and RES.ID_ not in (
          select
            TASK_ID_
          from
            ${prefix}ACT_RU_IDENTITYLINK ARIEL
          <where>
            ARIEL.TYPE_ = 'candidate' and ARIEL.GROUP_ID_ is not null
          </where>
        )
      </if>

      <if test="involvedUser != null">
        and I.USER_ID_ = #{involvedUser}
      </if>

      
      <!-- queryVariables -->
      <!-- PLEASE NOTE: If you change anything have a look into the HistoricVariableInstance & HistoricProcessInstance, the same query object is used there! -->
      <foreach collection="variables" index="index" item="queryVariableValue">
      and ${existsStart} (
        select
          ID_
        from
          ${prefix}ACT_RU_VARIABLE
        WHERE
          NAME_= #{queryVariableValue.name}

        <choose>
          <when test="queryVariableValue.local">
            and RES.ID_ = TASK_ID_
          </when>
          <otherwise>
            <!-- When process instance or case instance variable is queried for, taskId should be null -->
            and TASK_ID_ is null

            <choose>
              <when test="queryVariableValue.processInstanceVariable">
                and RES.PROC_INST_ID_ = PROC_INST_ID_
              </when>
              <otherwise>
                and RES.CASE_INST_ID_ = CASE_INST_ID_
              </otherwise>
            </choose>

          </otherwise>
        </choose>
        <bind name="varTypeField" value="'TYPE_'"/>
        <bind name="varPrefix" value="''"/>
        <if test="queryVariableValue.valueConditions != null">
          and 
          <include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.variableValueConditions"/>
        </if>
      ) ${existsEnd}
      </foreach>
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>
      
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.contextualAuthorizationCheck" /> 
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheck" />
 
    </where>
  </sql>

  <select id="selectTaskByNativeQuery" parameterType="java.util.Map" resultMap="taskResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectTaskByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="taskResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBeforeNativeQuery}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectTaskCountByNativeQuery" parameterType="java.util.Map" resultType="long">
     ${sql}
  </select>

  <!-- TASK GROUP ASSIGNMENT REPORT RESULT MAP -->

  <resultMap id="taskCountByCandidateGroupReportResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.TaskCountByCandidateGroupResultEntity">
    <result property="taskCount" column="TASK_COUNT_" jdbcType="INTEGER" />
    <result property="groupName" column="GROUP_NAME_" jdbcType="VARCHAR" />
  </resultMap>

  <select id="selectTaskCountByCandidateGroupReportQuery" parameterType="org.camunda.bpm.engine.impl.TaskReportImpl" resultMap="taskCountByCandidateGroupReportResultMap">
    SELECT
        COUNT(T.ID_) AS TASK_COUNT_,
        I.GROUP_ID_ AS GROUP_NAME_
    FROM
        ${prefix}ACT_RU_TASK T
    LEFT JOIN
        ${prefix}ACT_RU_IDENTITYLINK I
    ON
        I.TASK_ID_ = T.ID_

    <where>
      T.ASSIGNEE_ IS NULL
      <bind name="columnPrefix" value="'T.'"/>
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
    </where>

    GROUP BY
        I.GROUP_ID_
    ORDER BY
        GROUP_NAME_
    ASC
  </select>

</mapper>
