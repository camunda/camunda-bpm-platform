<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.UserEntity">

  <!-- USER INSERT -->

  <insert id="insertUser" parameterType="org.camunda.bpm.engine.impl.persistence.entity.UserEntity">
    insert into ${prefix}ACT_ID_USER (ID_, FIRST_, LAST_, EMAIL_, PWD_, REV_)
    values (
      #{id ,jdbcType=VARCHAR},
      #{firstName ,jdbcType=VARCHAR},
      #{lastName ,jdbcType=VARCHAR},
      #{email ,jdbcType=VARCHAR},
      #{password ,jdbcType=VARCHAR},
      1
    )
  </insert>

  <!-- USER UPDATE -->

  <update id="updateUser" parameterType="org.camunda.bpm.engine.impl.persistence.entity.UserEntity">
    update ${prefix}ACT_ID_USER set
      REV_ = #{revisionNext ,jdbcType=INTEGER},
      FIRST_ = #{firstName ,jdbcType=VARCHAR},
      LAST_ = #{lastName ,jdbcType=VARCHAR},
      EMAIL_ = #{email ,jdbcType=VARCHAR},
      PWD_ = #{password ,jdbcType=VARCHAR}
    where ID_ = #{id}
      and REV_ = #{revision}
  </update>
  
  <!-- USER DELETE -->

  <delete id="deleteUser" parameterType="org.camunda.bpm.engine.impl.persistence.entity.UserEntity">
    delete from ${prefix}ACT_ID_USER where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <!-- USER RESULTMAP -->

  <resultMap id="userResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.UserEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="firstName" column="FIRST_" jdbcType="VARCHAR" />
    <result property="lastName" column="LAST_" jdbcType="VARCHAR" />
    <result property="email" column="EMAIL_" jdbcType="VARCHAR" />
    <result property="dbPassword" column="PWD_" jdbcType="VARCHAR" />
  </resultMap>
  
  <!-- USER SELECT -->

  <select id="selectUser" parameterType="string" resultMap="userResultMap">
    select * from ${prefix}ACT_ID_USER where ID_ = #{id,jdbcType=VARCHAR}
  </select>
    
  <select id="selectUserByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.UserQueryImpl" resultMap="userResultMap">
  	<include refid="org.camunda.bpm.engine.impl.persistence.entity.Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.* 
    ${limitBetween}
    <include refid="selectUserByQueryCriteriaSql" />
    ${orderBy}
    ${limitAfter}
  </select>
  
   <select id="selectUserCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.UserQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectUserByQueryCriteriaSql" />
  </select>
  
  <sql id="selectUserByQueryCriteriaSql">
    from ${prefix}ACT_ID_USER RES 
    <if test="groupId != null">
      inner join ${prefix}ACT_ID_MEMBERSHIP M on RES.ID_ = M.USER_ID_
      inner join ${prefix}ACT_ID_GROUP G on M.GROUP_ID_ = G.ID_
    </if>
    <if test="tenantId != null">
      inner join ${prefix}ACT_ID_TENANT_MEMBER TM on RES.ID_ = TM.USER_ID_
    </if>
    
    <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.authCheckJoin" /> 
    
    <where>
      <if test="id != null">
        RES.ID_ = #{id}
      </if>
      <if test="ids != null &amp;&amp; ids.length > 0">
        and RES.ID_ in
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="firstName != null">
        and RES.FIRST_ = #{firstName}
      </if>
      <if test="firstNameLike != null">
        and RES.FIRST_ like #{firstNameLike}
      </if>
      <if test="lastName != null">
        and RES.LAST_ = #{lastName}
      </if>
      <if test="lastNameLike != null">
        and RES.LAST_ like #{lastNameLike}
      </if>
      <if test="email != null">
        and RES.EMAIL_ = #{email}
      </if>
      <if test="emailLike != null">
        and RES.EMAIL_ like #{emailLike}
      </if>
      <if test="groupId != null">
        and G.ID_ = #{groupId}
      </if>
      <if test="procDefId != null">
        and ${existsStart} (select ID_ from ${prefix}ACT_RU_IDENTITYLINK where PROC_DEF_ID_ = #{procDefId} and USER_ID_=RES.ID_ )${existsEnd}
      </if>
      <if test="tenantId != null">
        and TM.TENANT_ID_ = #{tenantId}
      </if>      
      
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.AuthorizationEntity.queryAuthorizationCheck" />
      
    </where>
  </sql>
  
</mapper>
