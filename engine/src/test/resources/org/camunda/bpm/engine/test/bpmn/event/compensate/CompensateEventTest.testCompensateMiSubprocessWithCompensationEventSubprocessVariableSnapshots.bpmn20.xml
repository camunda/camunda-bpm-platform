<?xml version="1.0" encoding="UTF-8"?>
<definitions id="definitions" 
  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
  xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
  targetNamespace="Examples">
	
	<process id="compensateProcess" isExecutable="true">

		<startEvent id="start" />
		
		<sequenceFlow sourceRef="start"	targetRef="scope" />

		<subProcess id="scope">
		
			<multiInstanceLoopCharacteristics isSequential="true">
				<loopCardinality>5</loopCardinality>
			</multiInstanceLoopCharacteristics>

			<startEvent id="startInScope" />
			
			<sequenceFlow sourceRef="startInScope" targetRef="bookHotel" />

			<serviceTask id="bookHotel" 
				camunda:class="org.camunda.bpm.engine.test.bpmn.event.compensate.helper.SetVariablesDelegate">
              <extensionElements>
                <camunda:field name="variable" stringValue="hotel" />
              </extensionElements>
            </serviceTask>
			
			<sequenceFlow sourceRef="bookHotel" targetRef="endInScope" />
			
			<endEvent id="endInScope" />

            <subProcess id="compensationScope" triggeredByEvent="true">
            
              <startEvent id="compensationStart">
                <compensateEventDefinition />
              </startEvent>  
              
              <sequenceFlow sourceRef="compensationStart" targetRef="undoBookHotel" />
              
              <serviceTask id="undoBookHotel" 
                    camunda:class="org.camunda.bpm.engine.test.bpmn.event.compensate.helper.GetVariablesDelegate">
                <extensionElements>
                  <camunda:field name="variable" stringValue="hotel" />
                </extensionElements>
              </serviceTask>
              
              <sequenceFlow sourceRef="undoBookHotel" targetRef="compensationEnd" />
              
              <endEvent id="compensationEnd" />
              
            </subProcess>

		</subProcess>

		<sequenceFlow sourceRef="scope" targetRef="throwCompensate" />
		
		<intermediateThrowEvent id="throwCompensate">
			<compensateEventDefinition />
		</intermediateThrowEvent>
		
		<sequenceFlow sourceRef="throwCompensate" targetRef="end" />
		
		<endEvent id="end" />
	</process>

</definitions>
